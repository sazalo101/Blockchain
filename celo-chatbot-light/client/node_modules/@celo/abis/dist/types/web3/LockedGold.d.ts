/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface LockedGold extends Contract {
    clone(): LockedGold;
    methods: {
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        slashingWhitelist(arg0: number | string): CeloTxObject<string>;
        totalDelegatedCelo(arg0: string): CeloTxObject<string>;
        totalNonvoting(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        unlockingPeriod(): CeloTxObject<string>;
        isSlasher(slasher: string): CeloTxObject<boolean>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string, _unlockingPeriod: number | string): CeloTxObject<void>;
        setUnlockingPeriod(value: number | string): CeloTxObject<void>;
        setMaxDelegateesCount(value: number | string): CeloTxObject<void>;
        lock(): CeloTxObject<void>;
        incrementNonvotingAccountBalance(account: string, value: number | string): CeloTxObject<void>;
        decrementNonvotingAccountBalance(account: string, value: number | string): CeloTxObject<void>;
        unlock(value: number | string): CeloTxObject<void>;
        relock(index: number | string, value: number | string): CeloTxObject<void>;
        withdraw(index: number | string): CeloTxObject<void>;
        getTotalLockedGold(): CeloTxObject<string>;
        getNonvotingLockedGold(): CeloTxObject<string>;
        delegateGovernanceVotes(delegatee: string, delegateFraction: number | string): CeloTxObject<void>;
        revokeDelegatedGovernanceVotes(delegatee: string, revokeFraction: number | string): CeloTxObject<void>;
        updateDelegatedAmount(delegator: string, delegatee: string): CeloTxObject<string>;
        getAccountTotalDelegatedFraction(account: string): CeloTxObject<string>;
        getAccountTotalLockedGold(account: string): CeloTxObject<string>;
        getAccountTotalGovernanceVotingPower(account: string): CeloTxObject<string>;
        getDelegatorDelegateeInfo(delegator: string, delegatee: string): CeloTxObject<{
            fraction: string;
            currentAmount: string;
            0: string;
            1: string;
        }>;
        getDelegatorDelegateeExpectedAndRealAmount(delegator: string, delegatee: string): CeloTxObject<{
            expected: string;
            real: string;
            0: string;
            1: string;
        }>;
        getDelegateesOfDelegator(delegator: string): CeloTxObject<string[]>;
        getAccountNonvotingLockedGold(account: string): CeloTxObject<string>;
        getPendingWithdrawals(account: string): CeloTxObject<{
            0: string[];
            1: string[];
        }>;
        getPendingWithdrawal(account: string, index: number | string): CeloTxObject<{
            0: string;
            1: string;
        }>;
        getTotalPendingWithdrawalsCount(account: string): CeloTxObject<string>;
        getTotalPendingWithdrawals(account: string): CeloTxObject<string>;
        getSlashingWhitelist(): CeloTxObject<string[]>;
        addSlasher(slasherIdentifier: string): CeloTxObject<void>;
        removeSlasher(slasherIdentifier: string, index: number | string): CeloTxObject<void>;
        slash(account: string, penalty: number | string, reporter: string, reward: number | string, lessers: string[], greaters: string[], indices: (number | string)[]): CeloTxObject<void>;
    };
    events: {
        AccountSlashed: ContractEvent<{
            slashed: string;
            penalty: string;
            reporter: string;
            reward: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        CeloDelegated: ContractEvent<{
            delegator: string;
            delegatee: string;
            percent: string;
            amount: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        DelegatedCeloRevoked: ContractEvent<{
            delegator: string;
            delegatee: string;
            percent: string;
            amount: string;
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        GoldLocked: ContractEvent<{
            account: string;
            value: string;
            0: string;
            1: string;
        }>;
        GoldRelocked: ContractEvent<{
            account: string;
            value: string;
            0: string;
            1: string;
        }>;
        GoldUnlocked: ContractEvent<{
            account: string;
            value: string;
            available: string;
            0: string;
            1: string;
            2: string;
        }>;
        GoldWithdrawn: ContractEvent<{
            account: string;
            value: string;
            0: string;
            1: string;
        }>;
        MaxDelegateesCountSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        SlasherWhitelistAdded: ContractEvent<string>;
        SlasherWhitelistRemoved: ContractEvent<string>;
        UnlockingPeriodSet: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newLockedGold(web3: Web3, address: string): LockedGold;
