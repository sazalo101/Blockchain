/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface MentoFeeHandlerSeller extends Contract {
    clone(): MentoFeeHandlerSeller;
    methods: {
        calculateMinAmount(midPriceNumerator: number | string, midPriceDenominator: number | string, amount: number | string, maxSlippage: number | string): CeloTxObject<string>;
        initialize(_registryAddress: string, tokenAddresses: string[], newMininumReports: (number | string)[]): CeloTxObject<void>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        minimumReports(arg0: string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setMinimumReports(tokenAddress: string, newMininumReports: number | string): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transfer(token: string, amount: number | string, to: string): CeloTxObject<boolean>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        sell(sellTokenAddress: string, buyTokenAddress: string, amount: number | string, maxSlippage: number | string): CeloTxObject<string>;
    };
    events: {
        MinimumReportsSet: ContractEvent<{
            tokenAddress: string;
            minimumReports: string;
            0: string;
            1: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        TokenSold: ContractEvent<{
            soldTokenAddress: string;
            boughtTokenAddress: string;
            amount: string;
            0: string;
            1: string;
            2: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newMentoFeeHandlerSeller(web3: Web3, address: string): MentoFeeHandlerSeller;
