/// <reference types="@walletconnect/types-v1" />
import { IClientMeta, ICreateSessionOptions, IJsonRpcRequest, IWalletConnectSDKOptions } from '@walletconnect/types';
import { TransactionConfig } from 'web3-core/types';
export declare enum SupportedMethods {
    accounts = "eth_accounts",
    signTransaction = "eth_signTransaction",
    personalSign = "personal_sign",
    signTypedData = "eth_signTypedData",
    decrypt = "personal_decrypt",
    computeSharedSecret = "personal_computeSharedSecret"
}
export declare enum CLIENT_EVENTS {
    connect = "connect",
    disconnect = "disconnect",
    session_request = "session_request",
    session_update = "session_update",
    call_request = "call_request",
    wc_sessionRequest = "wc_sessionRequest",
    wc_sessionUpdate = "wc_sessionUpdate"
}
export interface WalletConnectWalletOptions {
    init?: IWalletConnectSDKOptions;
    connect?: ICreateSessionOptions;
}
export interface Request<T extends unknown[], V extends string = string> extends IJsonRpcRequest {
    params: T;
    method: V;
}
export interface WCSession {
    connected: boolean;
    accounts: string[];
    chainId: number;
    bridge: string;
    key: string;
    clientId: string;
    clientMeta: IClientMeta | null;
    peerId: string;
    peerMeta: IClientMeta | null;
    handshakeId: number;
    handshakeTopic: string;
}
export declare type SessionProposal = Request<[
    {
        chainId: number;
        peerId: string;
        peerMeta: {
            description: string;
            icons: string[];
            name: string;
            url: string;
        };
    }
]>;
export declare type AccountsProposal = Request<unknown[], SupportedMethods.accounts>;
export declare type SignTransactionProposal = Request<[
    TransactionConfig,
    string
], SupportedMethods.signTransaction>;
export declare type PersonalSignProposal = Request<[
    string,
    string
], SupportedMethods.personalSign>;
export declare type SignTypedSignProposal = Request<[
    string,
    string
], SupportedMethods.signTypedData>;
export declare type DecryptProposal = Request<[
    string,
    string
], SupportedMethods.decrypt>;
export declare type ComputeSharedSecretProposal = Request<[
    string,
    string
], SupportedMethods.computeSharedSecret>;
export declare type EthProposal = AccountsProposal | SignTransactionProposal | PersonalSignProposal | SignTypedSignProposal | DecryptProposal | ComputeSharedSecretProposal;
//# sourceMappingURL=types.d.ts.map