/// <reference types="@walletconnect/types-v1" />
import { CeloTx, EncodedTransaction } from '@celo/connect';
import { RemoteWallet } from '@celo/wallet-remote';
import { IInternalEvent } from '@walletconnect/types';
import { AccountsProposal, ComputeSharedSecretProposal, DecryptProposal, PersonalSignProposal, SessionProposal, SignTransactionProposal, SignTypedSignProposal, WalletConnectWalletOptions } from './types';
import { WalletConnectSigner } from './wc-signer';
export declare class WalletConnectWallet extends RemoteWallet<WalletConnectSigner> {
    private initOptions;
    private connectOptions;
    private client?;
    constructor({ init, connect }: WalletConnectWalletOptions);
    /**
     * Pulled out to allow mocking
     */
    private getWalletConnectClient;
    /**
     * Get the URI needed for out of band session establishment
     */
    getUri(): Promise<string | undefined>;
    onSessionCreated: (error: Error | null, session: IInternalEvent) => void;
    onSessionDeleted: (error: Error | null, session: IInternalEvent) => void;
    onSessionRequest: (error: Error | null, session: SessionProposal) => void;
    onSessionUpdated: (error: Error | null, session: SessionProposal) => void;
    onCallRequest: (error: Error | null, payload: AccountsProposal | SignTransactionProposal | PersonalSignProposal | SignTypedSignProposal | DecryptProposal | ComputeSharedSecretProposal) => void;
    onWcSessionRequest: (error: Error | null, payload: SessionProposal) => void;
    onWcSessionUpdate: (error: Error | null, payload: SessionProposal) => void;
    loadAccountSigners(): Promise<Map<string, WalletConnectSigner>>;
    /**
     * Gets the signer based on the 'from' field in the tx body
     * @param txParams Transaction to sign
     * @dev overrides WalletBase.signTransaction
     */
    signTransaction(txParams: CeloTx): Promise<EncodedTransaction>;
    close(message?: string): Promise<void>;
}
//# sourceMappingURL=wc-wallet.d.ts.map