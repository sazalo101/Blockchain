"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalSigner = void 0;
const address_1 = require("@celo/utils/lib/address");
const ecdh_1 = require("@celo/utils/lib/ecdh");
const ecies_1 = require("@celo/utils/lib/ecies");
const sign_typed_data_utils_1 = require("@celo/utils/lib/sign-typed-data-utils");
const wallet_base_1 = require("@celo/wallet-base");
const ethUtil = __importStar(require("@ethereumjs/util"));
/**
 * Signs the EVM transaction using the provided private key
 */
class LocalSigner {
    constructor(privateKey) {
        this.privateKey = (0, address_1.ensureLeading0x)(privateKey);
    }
    getNativeKey() {
        return this.privateKey;
    }
    signTransaction(addToV, encodedTx) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, wallet_base_1.signTransaction)((0, wallet_base_1.getHashFromEncoded)(encodedTx.rlpEncode), this.privateKey, addToV);
        });
    }
    signPersonalMessage(data) {
        return __awaiter(this, void 0, void 0, function* () {
            // ecsign needs a privateKey without 0x
            const trimmedKey = (0, address_1.trimLeading0x)(this.privateKey);
            const pkBuffer = Buffer.from(trimmedKey, 'hex');
            const dataBuff = ethUtil.toBuffer((0, address_1.ensureLeading0x)(data));
            const msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);
            const sig = ethUtil.ecsign(msgHashBuff, pkBuffer);
            return {
                v: Number(sig.v),
                r: Buffer.from(sig.r),
                s: Buffer.from(sig.s),
            };
        });
    }
    signTypedData(typedData) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataBuff = (0, sign_typed_data_utils_1.generateTypedDataHash)(typedData);
            const trimmedKey = (0, address_1.trimLeading0x)(this.privateKey);
            const pkBuffer = Buffer.from(trimmedKey, 'hex');
            const sig = ethUtil.ecsign(dataBuff, pkBuffer);
            return {
                v: Number(sig.v),
                r: Buffer.from(sig.r),
                s: Buffer.from(sig.s),
            };
        });
    }
    decrypt(ciphertext) {
        const decryptedPlaintext = Buffer.from((0, ecies_1.Decrypt)(Buffer.from((0, address_1.trimLeading0x)(this.privateKey), 'hex'), ciphertext));
        return Promise.resolve(decryptedPlaintext);
    }
    computeSharedSecret(publicKey) {
        return Promise.resolve((0, ecdh_1.computeSharedSecret)(this.privateKey, publicKey));
    }
}
exports.LocalSigner = LocalSigner;
//# sourceMappingURL=local-signer.js.map