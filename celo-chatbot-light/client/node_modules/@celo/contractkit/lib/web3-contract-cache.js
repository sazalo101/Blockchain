"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3ContractCache = exports.ContractFactories = void 0;
const CeloDistributionSchedule_1 = require("@celo/abis-12/web3/CeloDistributionSchedule");
const FeeCurrencyDirectory_1 = require("@celo/abis-12/web3/FeeCurrencyDirectory");
const GoldToken_1 = require("@celo/abis-12/web3/GoldToken");
const Governance_1 = require("@celo/abis-12/web3/Governance");
const GasPriceMinimum_1 = require("@celo/abis/web3/0.8/GasPriceMinimum");
const Accounts_1 = require("@celo/abis/web3/Accounts");
const Attestations_1 = require("@celo/abis/web3/Attestations");
const BlockchainParameters_1 = require("@celo/abis/web3/BlockchainParameters");
const DoubleSigningSlasher_1 = require("@celo/abis/web3/DoubleSigningSlasher");
const DowntimeSlasher_1 = require("@celo/abis/web3/DowntimeSlasher");
const Election_1 = require("@celo/abis/web3/Election");
const EpochRewards_1 = require("@celo/abis/web3/EpochRewards");
const Escrow_1 = require("@celo/abis/web3/Escrow");
const FederatedAttestations_1 = require("@celo/abis/web3/FederatedAttestations");
const FeeCurrencyWhitelist_1 = require("@celo/abis/web3/FeeCurrencyWhitelist");
const FeeHandler_1 = require("@celo/abis/web3/FeeHandler");
const Freezer_1 = require("@celo/abis/web3/Freezer");
const IERC20_1 = require("@celo/abis/web3/IERC20");
const LockedGold_1 = require("@celo/abis/web3/LockedGold");
const MentoFeeHandlerSeller_1 = require("@celo/abis/web3/MentoFeeHandlerSeller");
const MultiSig_1 = require("@celo/abis/web3/MultiSig");
const OdisPayments_1 = require("@celo/abis/web3/OdisPayments");
const Proxy_1 = require("@celo/abis/web3/Proxy");
const Random_1 = require("@celo/abis/web3/Random");
const Registry_1 = require("@celo/abis/web3/Registry");
const SortedOracles_1 = require("@celo/abis/web3/SortedOracles");
const UniswapFeeHandlerSeller_1 = require("@celo/abis/web3/UniswapFeeHandlerSeller");
const Validators_1 = require("@celo/abis/web3/Validators");
const Reserve_1 = require("@celo/abis/web3/mento/Reserve");
const StableToken_1 = require("@celo/abis/web3/mento/StableToken");
const debug_1 = __importDefault(require("debug"));
const base_1 = require("./base");
const celo_tokens_1 = require("./celo-tokens");
const debug = (0, debug_1.default)('kit:web3-contract-cache');
exports.ContractFactories = {
    [base_1.CeloContract.Accounts]: Accounts_1.newAccounts,
    [base_1.CeloContract.Attestations]: Attestations_1.newAttestations,
    [base_1.CeloContract.BlockchainParameters]: BlockchainParameters_1.newBlockchainParameters,
    [base_1.CeloContract.CeloDistributionSchedule]: CeloDistributionSchedule_1.newCeloDistributionSchedule,
    [base_1.CeloContract.DoubleSigningSlasher]: DoubleSigningSlasher_1.newDoubleSigningSlasher,
    [base_1.CeloContract.DowntimeSlasher]: DowntimeSlasher_1.newDowntimeSlasher,
    [base_1.CeloContract.Election]: Election_1.newElection,
    [base_1.CeloContract.EpochRewards]: EpochRewards_1.newEpochRewards,
    [base_1.CeloContract.ERC20]: IERC20_1.newIERC20,
    [base_1.CeloContract.Escrow]: Escrow_1.newEscrow,
    [base_1.CeloContract.FederatedAttestations]: FederatedAttestations_1.newFederatedAttestations,
    [base_1.CeloContract.FeeCurrencyDirectory]: FeeCurrencyDirectory_1.newFeeCurrencyDirectory,
    [base_1.CeloContract.FeeCurrencyWhitelist]: FeeCurrencyWhitelist_1.newFeeCurrencyWhitelist,
    [base_1.CeloContract.Freezer]: Freezer_1.newFreezer,
    [base_1.CeloContract.FeeHandler]: FeeHandler_1.newFeeHandler,
    [base_1.CeloContract.MentoFeeHandlerSeller]: MentoFeeHandlerSeller_1.newMentoFeeHandlerSeller,
    [base_1.CeloContract.UniswapFeeHandlerSeller]: UniswapFeeHandlerSeller_1.newUniswapFeeHandlerSeller,
    [base_1.CeloContract.GasPriceMinimum]: GasPriceMinimum_1.newGasPriceMinimum,
    [base_1.CeloContract.GoldToken]: GoldToken_1.newGoldToken,
    [base_1.CeloContract.Governance]: Governance_1.newGovernance,
    [base_1.CeloContract.LockedGold]: LockedGold_1.newLockedGold,
    [base_1.CeloContract.MultiSig]: MultiSig_1.newMultiSig,
    [base_1.CeloContract.OdisPayments]: OdisPayments_1.newOdisPayments,
    [base_1.CeloContract.Random]: Random_1.newRandom,
    [base_1.CeloContract.Registry]: Registry_1.newRegistry,
    [base_1.CeloContract.Reserve]: Reserve_1.newReserve,
    [base_1.CeloContract.SortedOracles]: SortedOracles_1.newSortedOracles,
    [base_1.CeloContract.StableToken]: StableToken_1.newStableToken,
    [base_1.CeloContract.StableTokenEUR]: StableToken_1.newStableToken,
    [base_1.CeloContract.StableTokenBRL]: StableToken_1.newStableToken,
    [base_1.CeloContract.Validators]: Validators_1.newValidators,
};
const StableToContract = {
    [celo_tokens_1.StableToken.cEUR]: base_1.CeloContract.StableTokenEUR,
    [celo_tokens_1.StableToken.cUSD]: base_1.CeloContract.StableToken,
    [celo_tokens_1.StableToken.cREAL]: base_1.CeloContract.StableTokenBRL,
};
/**
 * Native Web3 contracts factory and cache.
 *
 * Exposes accessors to all `CeloContract` web3 contracts.
 *
 * Mostly a private cache, kit users would normally use
 * a contract wrapper
 */
class Web3ContractCache {
    /** core contract's address registry */
    constructor(registry) {
        this.registry = registry;
        this.cacheMap = {};
    }
    getAccounts() {
        return this.getContract(base_1.CeloContract.Accounts);
    }
    getAttestations() {
        return this.getContract(base_1.CeloContract.Attestations);
    }
    getBlockchainParameters() {
        return this.getContract(base_1.CeloContract.BlockchainParameters);
    }
    getCeloDistributionSchedule() {
        return this.getContract(base_1.CeloContract.CeloDistributionSchedule);
    }
    getDoubleSigningSlasher() {
        return this.getContract(base_1.CeloContract.DoubleSigningSlasher);
    }
    getDowntimeSlasher() {
        return this.getContract(base_1.CeloContract.DowntimeSlasher);
    }
    getElection() {
        return this.getContract(base_1.CeloContract.Election);
    }
    getEpochRewards() {
        return this.getContract(base_1.CeloContract.EpochRewards);
    }
    getErc20(address) {
        return this.getContract(base_1.CeloContract.ERC20, address);
    }
    getEscrow() {
        return this.getContract(base_1.CeloContract.Escrow);
    }
    getFederatedAttestations() {
        return this.getContract(base_1.CeloContract.FederatedAttestations);
    }
    getFeeCurrencyWhitelist() {
        return this.getContract(base_1.CeloContract.FeeCurrencyWhitelist);
    }
    getFreezer() {
        return this.getContract(base_1.CeloContract.Freezer);
    }
    getFeeHandler() {
        return this.getContract(base_1.CeloContract.FeeHandler);
    }
    getGasPriceMinimum() {
        return this.getContract(base_1.CeloContract.GasPriceMinimum);
    }
    getGoldToken() {
        return this.getContract(base_1.CeloContract.GoldToken);
    }
    getGovernance() {
        return this.getContract(base_1.CeloContract.Governance);
    }
    getLockedGold() {
        return this.getContract(base_1.CeloContract.LockedGold);
    }
    getMultiSig(address) {
        return this.getContract(base_1.CeloContract.MultiSig, address);
    }
    getOdisPayments() {
        return this.getContract(base_1.CeloContract.OdisPayments);
    }
    getRandom() {
        return this.getContract(base_1.CeloContract.Random);
    }
    getRegistry() {
        return this.getContract(base_1.CeloContract.Registry);
    }
    getReserve() {
        return this.getContract(base_1.CeloContract.Reserve);
    }
    getSortedOracles() {
        return this.getContract(base_1.CeloContract.SortedOracles);
    }
    getStableToken(stableToken = celo_tokens_1.StableToken.cUSD) {
        return this.getContract(StableToContract[stableToken]);
    }
    getValidators() {
        return this.getContract(base_1.CeloContract.Validators);
    }
    /**
     * Get native web3 contract wrapper
     */
    getContract(contract, address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cacheMap[contract] == null || address !== undefined) {
                // core contract in the registry
                if (!address) {
                    address = yield this.registry.addressFor(contract);
                }
                debug('Initiating contract %s', contract);
                debug('is it included?', base_1.ProxyContracts.includes(contract));
                debug('is it included?', base_1.ProxyContracts.toString());
                const createFn = base_1.ProxyContracts.includes(contract) ? Proxy_1.newProxy : exports.ContractFactories[contract];
                this.cacheMap[contract] = createFn(this.registry.connection.web3, address);
            }
            // we know it's defined (thus the !)
            return this.cacheMap[contract];
        });
    }
    invalidateContract(contract) {
        this.cacheMap[contract] = undefined;
    }
}
exports.Web3ContractCache = Web3ContractCache;
//# sourceMappingURL=web3-contract-cache.js.map