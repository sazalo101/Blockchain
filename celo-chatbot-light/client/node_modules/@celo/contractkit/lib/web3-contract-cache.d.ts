import { newCeloDistributionSchedule } from '@celo/abis-12/web3/CeloDistributionSchedule';
import { newFeeCurrencyDirectory } from '@celo/abis-12/web3/FeeCurrencyDirectory';
import { newGoldToken } from '@celo/abis-12/web3/GoldToken';
import { newGovernance } from '@celo/abis-12/web3/Governance';
import { newGasPriceMinimum } from '@celo/abis/web3/0.8/GasPriceMinimum';
import { newAccounts } from '@celo/abis/web3/Accounts';
import { newAttestations } from '@celo/abis/web3/Attestations';
import { newBlockchainParameters } from '@celo/abis/web3/BlockchainParameters';
import { newDoubleSigningSlasher } from '@celo/abis/web3/DoubleSigningSlasher';
import { newDowntimeSlasher } from '@celo/abis/web3/DowntimeSlasher';
import { newElection } from '@celo/abis/web3/Election';
import { newEpochRewards } from '@celo/abis/web3/EpochRewards';
import { newEscrow } from '@celo/abis/web3/Escrow';
import { newFederatedAttestations } from '@celo/abis/web3/FederatedAttestations';
import { newFeeCurrencyWhitelist } from '@celo/abis/web3/FeeCurrencyWhitelist';
import { newFeeHandler } from '@celo/abis/web3/FeeHandler';
import { newFreezer } from '@celo/abis/web3/Freezer';
import { newIERC20 } from '@celo/abis/web3/IERC20';
import { newLockedGold } from '@celo/abis/web3/LockedGold';
import { newMentoFeeHandlerSeller } from '@celo/abis/web3/MentoFeeHandlerSeller';
import { newMultiSig } from '@celo/abis/web3/MultiSig';
import { newOdisPayments } from '@celo/abis/web3/OdisPayments';
import { newRandom } from '@celo/abis/web3/Random';
import { newRegistry } from '@celo/abis/web3/Registry';
import { newSortedOracles } from '@celo/abis/web3/SortedOracles';
import { newUniswapFeeHandlerSeller } from '@celo/abis/web3/UniswapFeeHandlerSeller';
import { newValidators } from '@celo/abis/web3/Validators';
import { newReserve } from '@celo/abis/web3/mento/Reserve';
import { newStableToken } from '@celo/abis/web3/mento/StableToken';
import { AddressRegistry } from './address-registry';
import { StableToken } from './celo-tokens';
export declare const ContractFactories: {
    Accounts: typeof newAccounts;
    Attestations: typeof newAttestations;
    BlockchainParameters: typeof newBlockchainParameters;
    CeloDistributionSchedule: typeof newCeloDistributionSchedule;
    DoubleSigningSlasher: typeof newDoubleSigningSlasher;
    DowntimeSlasher: typeof newDowntimeSlasher;
    Election: typeof newElection;
    EpochRewards: typeof newEpochRewards;
    ERC20: typeof newIERC20;
    Escrow: typeof newEscrow;
    FederatedAttestations: typeof newFederatedAttestations;
    FeeCurrencyDirectory: typeof newFeeCurrencyDirectory;
    FeeCurrencyWhitelist: typeof newFeeCurrencyWhitelist;
    Freezer: typeof newFreezer;
    FeeHandler: typeof newFeeHandler;
    MentoFeeHandlerSeller: typeof newMentoFeeHandlerSeller;
    UniswapFeeHandlerSeller: typeof newUniswapFeeHandlerSeller;
    GasPriceMinimum: typeof newGasPriceMinimum;
    GoldToken: typeof newGoldToken;
    Governance: typeof newGovernance;
    LockedGold: typeof newLockedGold;
    MultiSig: typeof newMultiSig;
    OdisPayments: typeof newOdisPayments;
    Random: typeof newRandom;
    Registry: typeof newRegistry;
    Reserve: typeof newReserve;
    SortedOracles: typeof newSortedOracles;
    StableToken: typeof newStableToken;
    StableTokenEUR: typeof newStableToken;
    StableTokenBRL: typeof newStableToken;
    Validators: typeof newValidators;
};
export type CFType = typeof ContractFactories;
type ContractCacheMap = {
    [K in keyof CFType]?: ReturnType<CFType[K]>;
};
/**
 * Native Web3 contracts factory and cache.
 *
 * Exposes accessors to all `CeloContract` web3 contracts.
 *
 * Mostly a private cache, kit users would normally use
 * a contract wrapper
 */
export declare class Web3ContractCache {
    readonly registry: AddressRegistry;
    private cacheMap;
    /** core contract's address registry */
    constructor(registry: AddressRegistry);
    getAccounts(): Promise<import("@celo/abis/web3/Accounts").Accounts>;
    getAttestations(): Promise<import("@celo/abis/web3/Attestations").Attestations>;
    getBlockchainParameters(): Promise<import("@celo/abis/web3/BlockchainParameters").BlockchainParameters>;
    getCeloDistributionSchedule(): Promise<import("@celo/abis-12/web3/CeloDistributionSchedule").CeloDistributionSchedule>;
    getDoubleSigningSlasher(): Promise<import("@celo/abis/web3/DoubleSigningSlasher").DoubleSigningSlasher>;
    getDowntimeSlasher(): Promise<import("@celo/abis/web3/DowntimeSlasher").DowntimeSlasher>;
    getElection(): Promise<import("@celo/abis/web3/Election").Election>;
    getEpochRewards(): Promise<import("@celo/abis/web3/EpochRewards").EpochRewards>;
    getErc20(address: string): Promise<import("@celo/abis/web3/IERC20").IERC20>;
    getEscrow(): Promise<import("@celo/abis/web3/Escrow").Escrow>;
    getFederatedAttestations(): Promise<import("@celo/abis/web3/FederatedAttestations").FederatedAttestations>;
    getFeeCurrencyWhitelist(): Promise<import("@celo/abis/web3/FeeCurrencyWhitelist").FeeCurrencyWhitelist>;
    getFreezer(): Promise<import("@celo/abis/web3/Freezer").Freezer>;
    getFeeHandler(): Promise<import("@celo/abis/web3/FeeHandler").FeeHandler>;
    getGasPriceMinimum(): Promise<import("@celo/abis/web3/0.8/GasPriceMinimum").GasPriceMinimum>;
    getGoldToken(): Promise<import("@celo/abis-12/web3/GoldToken").GoldToken>;
    getGovernance(): Promise<import("@celo/abis-12/web3/Governance").Governance>;
    getLockedGold(): Promise<import("@celo/abis/web3/LockedGold").LockedGold>;
    getMultiSig(address: string): Promise<import("@celo/abis/web3/MultiSig").MultiSig>;
    getOdisPayments(): Promise<import("@celo/abis/web3/OdisPayments").OdisPayments>;
    getRandom(): Promise<import("@celo/abis/web3/Random").Random>;
    getRegistry(): Promise<import("@celo/abis/web3/Registry").Registry>;
    getReserve(): Promise<import("@celo/abis/web3/mento/Reserve").Reserve>;
    getSortedOracles(): Promise<import("@celo/abis/web3/SortedOracles").SortedOracles>;
    getStableToken(stableToken?: StableToken): Promise<NonNullable<import("@celo/abis/web3/Registry").Registry | import("@celo/abis/web3/Accounts").Accounts | import("@celo/abis/web3/IERC20").IERC20 | import("@celo/abis-12/web3/GoldToken").GoldToken | import("@celo/abis/web3/mento/StableToken").StableToken | import("@celo/abis/web3/Attestations").Attestations | import("@celo/abis/web3/BlockchainParameters").BlockchainParameters | import("@celo/abis-12/web3/CeloDistributionSchedule").CeloDistributionSchedule | import("@celo/abis/web3/DoubleSigningSlasher").DoubleSigningSlasher | import("@celo/abis/web3/DowntimeSlasher").DowntimeSlasher | import("@celo/abis/web3/Election").Election | import("@celo/abis/web3/EpochRewards").EpochRewards | import("@celo/abis/web3/Escrow").Escrow | import("@celo/abis/web3/FederatedAttestations").FederatedAttestations | import("@celo/abis-12/web3/FeeCurrencyDirectory").FeeCurrencyDirectory | import("@celo/abis/web3/FeeCurrencyWhitelist").FeeCurrencyWhitelist | import("@celo/abis/web3/Freezer").Freezer | import("@celo/abis/web3/FeeHandler").FeeHandler | import("@celo/abis/web3/MentoFeeHandlerSeller").MentoFeeHandlerSeller | import("@celo/abis/web3/UniswapFeeHandlerSeller").UniswapFeeHandlerSeller | import("@celo/abis/web3/0.8/GasPriceMinimum").GasPriceMinimum | import("@celo/abis-12/web3/Governance").Governance | import("@celo/abis/web3/LockedGold").LockedGold | import("@celo/abis/web3/MultiSig").MultiSig | import("@celo/abis/web3/OdisPayments").OdisPayments | import("@celo/abis/web3/Random").Random | import("@celo/abis/web3/mento/Reserve").Reserve | import("@celo/abis/web3/SortedOracles").SortedOracles | import("@celo/abis/web3/Validators").Validators | undefined>>;
    getValidators(): Promise<import("@celo/abis/web3/Validators").Validators>;
    /**
     * Get native web3 contract wrapper
     */
    getContract<C extends keyof typeof ContractFactories>(contract: C, address?: string): Promise<NonNullable<ContractCacheMap[C]>>;
    invalidateContract<C extends keyof typeof ContractFactories>(contract: C): void;
}
export {};
