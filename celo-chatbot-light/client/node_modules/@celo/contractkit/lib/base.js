"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyContracts = exports.suffixProxy = exports.stripProxy = exports.RegisteredContracts = exports.AllContracts = exports.CeloContract = void 0;
var CeloContract;
(function (CeloContract) {
    CeloContract["Accounts"] = "Accounts";
    CeloContract["Attestations"] = "Attestations";
    CeloContract["BlockchainParameters"] = "BlockchainParameters";
    CeloContract["CeloDistributionSchedule"] = "CeloDistributionSchedule";
    CeloContract["DoubleSigningSlasher"] = "DoubleSigningSlasher";
    CeloContract["DowntimeSlasher"] = "DowntimeSlasher";
    CeloContract["Election"] = "Election";
    CeloContract["EpochRewards"] = "EpochRewards";
    CeloContract["ERC20"] = "ERC20";
    CeloContract["Escrow"] = "Escrow";
    CeloContract["FederatedAttestations"] = "FederatedAttestations";
    CeloContract["FeeCurrencyDirectory"] = "FeeCurrencyDirectory";
    CeloContract["FeeCurrencyWhitelist"] = "FeeCurrencyWhitelist";
    CeloContract["FeeHandler"] = "FeeHandler";
    CeloContract["Freezer"] = "Freezer";
    CeloContract["GasPriceMinimum"] = "GasPriceMinimum";
    CeloContract["GoldToken"] = "GoldToken";
    CeloContract["Governance"] = "Governance";
    CeloContract["LockedGold"] = "LockedGold";
    CeloContract["MentoFeeHandlerSeller"] = "MentoFeeHandlerSeller";
    CeloContract["UniswapFeeHandlerSeller"] = "UniswapFeeHandlerSeller";
    CeloContract["MultiSig"] = "MultiSig";
    CeloContract["OdisPayments"] = "OdisPayments";
    CeloContract["Random"] = "Random";
    CeloContract["Registry"] = "Registry";
    CeloContract["Reserve"] = "Reserve";
    CeloContract["SortedOracles"] = "SortedOracles";
    CeloContract["StableToken"] = "StableToken";
    CeloContract["StableTokenEUR"] = "StableTokenEUR";
    CeloContract["StableTokenBRL"] = "StableTokenBRL";
    CeloContract["Validators"] = "Validators";
})(CeloContract || (exports.CeloContract = CeloContract = {}));
exports.AllContracts = Object.keys(CeloContract);
const AuxiliaryContracts = [CeloContract.MultiSig, CeloContract.ERC20];
exports.RegisteredContracts = exports.AllContracts.filter((v) => !AuxiliaryContracts.includes(v));
/** @internal */
const stripProxy = (contract) => contract.replace('Proxy', '');
exports.stripProxy = stripProxy;
/** @internal */
const suffixProxy = (contract) => contract.endsWith('Proxy') ? contract : `${contract}Proxy`;
exports.suffixProxy = suffixProxy;
exports.ProxyContracts = exports.AllContracts.map((c) => (0, exports.suffixProxy)(c));
//# sourceMappingURL=base.js.map