import { FeeHandler } from '@celo/abis/web3/FeeHandler';
import { Address } from '@celo/connect';
import BigNumber from 'bignumber.js';
import { BaseWrapper } from './BaseWrapper';
export declare enum ExchangeProposalState {
    None = 0,
    Proposed = 1,
    Approved = 2,
    Executed = 3,
    Cancelled = 4
}
export interface StableTokenExchangeLimits {
    minExchangeAmount: BigNumber;
    maxExchangeAmount: BigNumber;
}
export interface ExchangeProposal {
    exchanger: string;
    stableToken: string;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    vetoPeriodSeconds: BigNumber;
    approvalTimestamp: BigNumber;
    state: ExchangeProposalState;
    sellCelo: boolean;
    id: string | number;
}
export interface ExchangeProposalReadable {
    exchanger: string;
    stableToken: string;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    approvalTimestamp: BigNumber;
    state: string;
    sellCelo: boolean;
    id: string | number;
    implictPricePerCelo: BigNumber;
}
export declare class FeeHandlerWrapper extends BaseWrapper<FeeHandler> {
    owner: () => Promise<string>;
    handleAll: () => import("@celo/connect").CeloTransactionObject<void>;
    burnCelo: () => import("@celo/connect").CeloTransactionObject<void>;
    handle(tokenAddress: Address): Promise<import("@celo/connect").CeloTransactionObject<void>>;
    sell(tokenAddress: Address): Promise<import("@celo/connect").CeloTransactionObject<void>>;
    distribute(tokenAddress: Address): Promise<import("@celo/connect").CeloTransactionObject<void>>;
}
export type FeeHandlerType = FeeHandlerWrapper;
