"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoubleSigningSlasherWrapper = void 0;
const BaseSlasher_1 = require("./BaseSlasher");
const BaseWrapper_1 = require("./BaseWrapper");
/**
 * Contract handling slashing for Validator double-signing
 */
class DoubleSigningSlasherWrapper extends BaseSlasher_1.BaseSlasher {
    /**
     * Parses block number out of header.
     * @param header RLP encoded header
     * @return Block number.
     */
    getBlockNumberFromHeader(header) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.contract.methods.getBlockNumberFromHeader(header).call();
            return (0, BaseWrapper_1.valueToInt)(res);
        });
    }
    /**
     * Slash a Validator for double-signing.
     * @param validatorAddress Validator to slash.
     * @param headerA First double signed block header.
     * @param headerB Second double signed block header.
     */
    slashValidator(validatorAddress, headerA, headerB) {
        return __awaiter(this, void 0, void 0, function* () {
            const validators = yield this.contracts.getValidators();
            const validator = yield validators.getValidator(validatorAddress);
            return this.slashSigner(validator.signer, headerA, headerB);
        });
    }
    /**
     * Slash a Validator signer for double-signing.
     * @param signer Validator signer address to slash.
     * @param headerA First double signed block header.
     * @param headerB Second double signed block header.
     */
    slashSigner(signerAddress, headerA, headerB) {
        return __awaiter(this, void 0, void 0, function* () {
            const blockNumber = yield this.getBlockNumberFromHeader(headerA);
            const index = yield this.signerIndexAtBlock(signerAddress, blockNumber);
            return this.slash(signerAddress, index, headerA, headerB, ...(yield this.trailingSlashArgs(signerAddress, blockNumber)));
        });
    }
}
exports.DoubleSigningSlasherWrapper = DoubleSigningSlasherWrapper;
//# sourceMappingURL=DoubleSigningSlasher.js.map