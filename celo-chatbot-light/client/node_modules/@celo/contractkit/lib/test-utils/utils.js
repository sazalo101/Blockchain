"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mineToNextEpoch = exports.currentEpochNumber = void 0;
const ganache_test_1 = require("@celo/dev-utils/lib/ganache-test");
const GANACHE_EPOCH_SIZE = 100;
const currentEpochNumber = (web3, epochSize = GANACHE_EPOCH_SIZE) => __awaiter(void 0, void 0, void 0, function* () {
    const blockNumber = yield web3.eth.getBlockNumber();
    return getEpochNumberOfBlock(blockNumber, epochSize);
});
exports.currentEpochNumber = currentEpochNumber;
const getFirstBlockNumberForEpoch = (epochNumber, epochSize = GANACHE_EPOCH_SIZE) => {
    if (epochNumber === 0) {
        // No first block for epoch 0
        return 0;
    }
    return (epochNumber - 1) * epochSize + 1;
};
const getEpochNumberOfBlock = (blockNumber, epochSize = GANACHE_EPOCH_SIZE) => {
    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
    const epochNumber = Math.floor(blockNumber / epochSize);
    if (blockNumber % epochSize === 0) {
        return epochNumber;
    }
    else {
        return epochNumber + 1;
    }
};
const mineToNextEpoch = (web3, epochSize = GANACHE_EPOCH_SIZE) => __awaiter(void 0, void 0, void 0, function* () {
    const blockNumber = yield web3.eth.getBlockNumber();
    const epochNumber = yield (0, exports.currentEpochNumber)(web3, epochSize);
    const blocksUntilNextEpoch = getFirstBlockNumberForEpoch(epochNumber + 1, epochSize) - blockNumber;
    yield (0, ganache_test_1.mineBlocks)(blocksUntilNextEpoch, web3);
});
exports.mineToNextEpoch = mineToNextEpoch;
//# sourceMappingURL=utils.js.map