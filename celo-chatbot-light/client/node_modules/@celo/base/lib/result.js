"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErr = exports.isOk = exports.parseJsonAsResult = exports.JSONParseError = exports.JSONParseErrorType = exports.RootError = exports.makeAsyncThrowable = exports.makeThrowable = exports.throwIfError = exports.Err = exports.Ok = void 0;
const Ok = (result) => ({
    ok: true,
    result,
});
exports.Ok = Ok;
const Err = (error) => ({
    ok: false,
    error,
});
exports.Err = Err;
function throwIfError(result, errorModifier) {
    if (!result.ok) {
        if (errorModifier) {
            throw errorModifier(result.error);
        }
        throw result.error;
    }
    return result.result;
}
exports.throwIfError = throwIfError;
function makeThrowable(f, errorModifier) {
    return (...args) => throwIfError(f(...args), errorModifier);
}
exports.makeThrowable = makeThrowable;
function makeAsyncThrowable(f, errorModifier) {
    return (...args) => __awaiter(this, void 0, void 0, function* () {
        const result = yield f(...args);
        return throwIfError(result, errorModifier);
    });
}
exports.makeAsyncThrowable = makeAsyncThrowable;
class RootError extends Error {
    constructor(errorType) {
        super();
        this.errorType = errorType;
        // @ts-ignore
        if (errorType.toString) {
            // @ts-ignore
            this.name = errorType.toString();
        }
    }
}
exports.RootError = RootError;
exports.JSONParseErrorType = 'JsonParseError';
class JSONParseError extends RootError {
    constructor(error) {
        super(exports.JSONParseErrorType);
        this.error = error;
    }
}
exports.JSONParseError = JSONParseError;
function parseJsonAsResult(data) {
    try {
        return (0, exports.Ok)(JSON.parse(data));
    }
    catch (error) {
        return (0, exports.Err)(new JSONParseError(error));
    }
}
exports.parseJsonAsResult = parseJsonAsResult;
function isOk(result) {
    return result.ok;
}
exports.isOk = isOk;
function isErr(result) {
    return !result.ok;
}
exports.isErr = isErr;
//# sourceMappingURL=result.js.map