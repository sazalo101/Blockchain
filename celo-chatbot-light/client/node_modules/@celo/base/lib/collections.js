"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkedListChanges = exports.linkedListChange = exports.intersection = exports.notEmpty = exports.zeroRange = exports.zip3 = exports.zip = void 0;
const address_1 = require("./address");
function zip(fn, as, bs) {
    const len = Math.min(as.length, bs.length);
    const res = [];
    for (let i = 0; i < len; i++) {
        res.push(fn(as[i], bs[i]));
    }
    return res;
}
exports.zip = zip;
function zip3(as, bs, cs) {
    const len = Math.min(as.length, bs.length, cs.length);
    const res = [];
    for (let i = 0; i < len; i++) {
        res.push([as[i], bs[i], cs[i]]);
    }
    return res;
}
exports.zip3 = zip3;
function zeroRange(to) {
    return Array.from(Array(to).keys());
}
exports.zeroRange = zeroRange;
// https://stackoverflow.com/questions/43118692/typescript-filter-out-nulls-from-an-array
function notEmpty(value) {
    return value !== null && value !== undefined;
}
exports.notEmpty = notEmpty;
function intersection(arrays) {
    if (arrays.length === 0) {
        return [];
    }
    const sets = arrays.map((array) => new Set(array));
    const res = [];
    for (const elem of arrays[0]) {
        if (sets.every((set) => set.has(elem))) {
            res.push(elem);
        }
    }
    return res;
}
exports.intersection = intersection;
function upsert(sortedList, change, comparator) {
    const oldIdx = sortedList.findIndex((a) => (0, address_1.eqAddress)(a.address, change.address));
    if (oldIdx === -1) {
        throw new Error('');
    }
    sortedList.splice(oldIdx, 1);
    const newIdx = sortedList.findIndex((a) => comparator(a.value, change.value));
    if (newIdx === -1) {
        sortedList.push(change);
        return sortedList.length - 1;
    }
    else {
        sortedList.splice(newIdx, 0, change);
        return newIdx;
    }
}
// Warning: sortedList is modified
function _linkedListChange(sortedList, change, comparator) {
    const idx = upsert(sortedList, change, comparator);
    const greater = idx === 0 ? address_1.NULL_ADDRESS : sortedList[idx - 1].address;
    const lesser = idx === sortedList.length - 1 ? address_1.NULL_ADDRESS : sortedList[idx + 1].address;
    return { lesser, greater };
}
function linkedListChange(sortedList, change, comparator) {
    const list = sortedList.concat();
    const { lesser, greater } = _linkedListChange(list, change, comparator);
    return { lesser, greater, list };
}
exports.linkedListChange = linkedListChange;
function linkedListChanges(sortedList, changeList, comparator) {
    const listClone = [...sortedList];
    const lessers = [];
    const greaters = [];
    for (const it of changeList) {
        const { lesser, greater } = _linkedListChange(listClone, it, comparator);
        lessers.push(lesser);
        greaters.push(greater);
    }
    return { lessers, greaters, list: listClone };
}
exports.linkedListChanges = linkedListChanges;
//# sourceMappingURL=collections.js.map