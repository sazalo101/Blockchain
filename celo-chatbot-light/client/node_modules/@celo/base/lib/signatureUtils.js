"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureBase = exports.serializeSignature = exports.NativeSigner = exports.POP_SIZE = void 0;
exports.POP_SIZE = 65;
// Uses a native function to sign (as signFn), most commonly `web.eth.sign`
function NativeSigner(signFn, signer) {
    return {
        sign: (message) => __awaiter(this, void 0, void 0, function* () {
            return signFn(message, signer);
        }),
    };
}
exports.NativeSigner = NativeSigner;
function serializeSignature(signature) {
    const serializedV = signature.v.toString(16);
    const serializedR = signature.r.slice(2);
    const serializedS = signature.s.slice(2);
    return '0x' + serializedV + serializedR + serializedS;
}
exports.serializeSignature = serializeSignature;
exports.SignatureBase = {
    NativeSigner,
    serializeSignature,
};
//# sourceMappingURL=signatureUtils.js.map