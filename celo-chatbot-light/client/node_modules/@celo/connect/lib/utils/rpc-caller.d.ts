import { Callback, Error, HttpProvider, JsonRpcPayload, JsonRpcResponse } from '../types';
export declare function rpcCallHandler(payload: JsonRpcPayload, handler: (p: JsonRpcPayload) => Promise<any>, callback: Callback<JsonRpcResponse>): void;
export declare function getRandomId(): number;
export interface RpcCaller {
    call: (method: string, params: any[]) => Promise<JsonRpcResponse>;
    send: (payload: JsonRpcPayload, callback: (error: Error | null, result?: JsonRpcResponse) => void) => void;
}
export declare class HttpRpcCaller implements RpcCaller {
    readonly httpProvider: HttpProvider;
    readonly jsonrpcVersion: string;
    constructor(httpProvider: HttpProvider, jsonrpcVersion?: string);
    call(method: string, params: any[]): Promise<JsonRpcResponse>;
    send(payload: JsonRpcPayload, callback: (error: Error | null, result?: JsonRpcResponse) => void): void;
}
