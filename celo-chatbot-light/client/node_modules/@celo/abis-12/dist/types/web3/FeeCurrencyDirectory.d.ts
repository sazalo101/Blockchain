/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface FeeCurrencyDirectory extends Contract {
    clone(): FeeCurrencyDirectory;
    methods: {
        currencies(arg0: string): CeloTxObject<{
            oracle: string;
            intrinsicGas: string;
            0: string;
            1: string;
        }>;
        initialized(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        initialize(): CeloTxObject<void>;
        setCurrencyConfig(token: string, oracle: string, intrinsicGas: number | string): CeloTxObject<void>;
        removeCurrencies(token: string, index: number | string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        getCurrencies(): CeloTxObject<string[]>;
        getCurrencyConfig(token: string): CeloTxObject<{
            oracle: string;
            intrinsicGas: string;
        }>;
        getExchangeRate(token: string): CeloTxObject<{
            numerator: string;
            denominator: string;
            0: string;
            1: string;
        }>;
    };
    events: {
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newFeeCurrencyDirectory(web3: Web3, address: string): FeeCurrencyDirectory;
