/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface GoldToken extends Contract {
    clone(): GoldToken;
    methods: {
        celoTokenDistributionSchedule(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isL2(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        initialize(registryAddress: string): CeloTxObject<void>;
        setCeloTokenDistributionScheduleAddress(celoTokenDistributionScheduleAddress: string): CeloTxObject<void>;
        transfer(to: string, value: number | string): CeloTxObject<boolean>;
        transferWithComment(to: string, value: number | string, comment: string): CeloTxObject<boolean>;
        burn(value: number | string): CeloTxObject<boolean>;
        approve(spender: string, value: number | string): CeloTxObject<boolean>;
        increaseAllowance(spender: string, value: number | string): CeloTxObject<boolean>;
        decreaseAllowance(spender: string, value: number | string): CeloTxObject<boolean>;
        transferFrom(from: string, to: string, value: number | string): CeloTxObject<boolean>;
        mint(to: string, value: number | string): CeloTxObject<boolean>;
        increaseSupply(amount: number | string): CeloTxObject<void>;
        name(): CeloTxObject<string>;
        symbol(): CeloTxObject<string>;
        decimals(): CeloTxObject<string>;
        allocatedSupply(): CeloTxObject<string>;
        circulatingSupply(): CeloTxObject<string>;
        allowance(_owner: string, spender: string): CeloTxObject<string>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        getBurnedAmount(): CeloTxObject<string>;
        balanceOf(_owner: string): CeloTxObject<string>;
        totalSupply(): CeloTxObject<string>;
    };
    events: {
        Approval: ContractEvent<{
            owner: string;
            spender: string;
            value: string;
            0: string;
            1: string;
            2: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        SetCeloTokenDistributionScheduleAddress: ContractEvent<string>;
        Transfer: ContractEvent<{
            from: string;
            to: string;
            value: string;
            0: string;
            1: string;
            2: string;
        }>;
        TransferComment: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newGoldToken(web3: Web3, address: string): GoldToken;
