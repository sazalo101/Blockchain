{"version":3,"sources":["../src/Eth.js"],"names":["remapTransactionRelatedErrors","e","statusCode","EthAppPleaseEnableContractData","Eth","constructor","transport","scrambleKey","decorateAppAPIMethods","getAddress","path","boolDisplay","boolChaincode","paths","buffer","Buffer","alloc","length","forEach","element","index","writeUInt32BE","send","then","response","result","publicKeyLength","addressLength","publicKey","slice","toString","address","chainCode","provideERC20TokenInformation","data","signTransaction","rawTxHex","offset","rawTx","from","toSend","maxChunkSize","chunkSize","copy","push","i","apduResponse","v","r","s","getAppConfiguration","arbitraryDataEnabled","version","signPersonalMessage","messageHex","message"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\n// FIXME drop:\nimport { splitPath, foreach } from \"./utils\";\nimport { EthAppPleaseEnableContractData } from \"@ledgerhq/errors\";\nimport type Transport from \"@ledgerhq/hw-transport\";\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Contract data on the Ethereum app Settings\"\n    );\n  }\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nexport default class Eth {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"w0w\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\"\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chainCode?: string\n  }> {\n    let paths = splitPath(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then(response => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\");\n        result.address =\n          \"0x\" +\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\");\n        if (boolChaincode) {\n          result.chainCode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            )\n            .toString(\"hex\");\n        }\n        return result;\n      });\n  }\n\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n      () => true,\n      e => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n          // we return a flag to know if the call was effective or not\n          return false;\n        }\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(\n      () => {\n        const v = response.slice(0, 1).toString(\"hex\");\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return { v, r, s };\n      },\n      e => {\n        throw remapTransactionRelatedErrors(e);\n      }\n    );\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    version: string\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\neth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n})\n   */\n  signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number,\n    s: string,\n    r: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      let buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return { v, r, s };\n    });\n  }\n}\n"],"file":"Eth.js"}