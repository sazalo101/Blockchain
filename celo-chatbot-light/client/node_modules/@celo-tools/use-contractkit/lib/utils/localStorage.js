"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var MockedLocalStorage = /** @class */ (function () {
    function MockedLocalStorage() {
        this.storage = new Map();
    }
    MockedLocalStorage.prototype.getItem = function (key) {
        var _key = String(key);
        if (this.storage.has(_key)) {
            this.storage.get(_key);
        }
        return null;
    };
    MockedLocalStorage.prototype.key = function (index) {
        var e_1, _a;
        if (index < 0 || index >= this.length) {
            return null;
        }
        var i = 0;
        try {
            for (var _b = __values(this.storage.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var value = _c.value;
                if (i === index) {
                    return value;
                }
                i += 1;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return null;
    };
    MockedLocalStorage.prototype.setItem = function (key, value) {
        this.storage.set(String(key), String(value));
    };
    MockedLocalStorage.prototype.removeItem = function (key) {
        this.storage.delete(String(key));
    };
    MockedLocalStorage.prototype.clear = function () {
        this.storage.clear();
    };
    Object.defineProperty(MockedLocalStorage.prototype, "length", {
        get: function () {
            return this.storage.size;
        },
        enumerable: false,
        configurable: true
    });
    return MockedLocalStorage;
}());
var localStorage = typeof window === 'undefined'
    ? new MockedLocalStorage()
    : window.localStorage;
exports.default = localStorage;
//# sourceMappingURL=localStorage.js.map