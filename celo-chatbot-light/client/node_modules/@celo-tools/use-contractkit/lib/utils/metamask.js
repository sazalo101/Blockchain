"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchToCeloNetwork = exports.addNetworksToMetamask = exports.addNetworkToMetamask = exports.addTokensToMetamask = exports.makeAddCeloTokensParams = exports.tokenToParam = exports.makeNetworkParams = exports.MetamaskRPCErrorCode = void 0;
var contractkit_1 = require("@celo/contractkit");
var web3_1 = __importDefault(require("web3"));
var constants_1 = require("../constants");
var types_1 = require("../types");
var CELO_PARAMS = Object.freeze({
    chainName: 'Celo',
    testnet: false,
    nativeCurrency: {
        name: 'CELO',
    },
});
var ALFAJORES_PARAMS = Object.freeze({
    chainName: 'Alfajores Testnet',
    testnet: true,
    nativeCurrency: {
        name: 'A-CELO',
    },
});
var BAKLAVA_PARAMS = Object.freeze({
    chainName: 'Baklava Testnet',
    testnet: true,
    nativeCurrency: {
        name: 'B-CELO',
    },
});
var params = (_a = {},
    _a[types_1.ChainId.Mainnet] = CELO_PARAMS,
    _a[types_1.ChainId.Alfajores] = ALFAJORES_PARAMS,
    _a[types_1.ChainId.Baklava] = BAKLAVA_PARAMS,
    _a);
var NETWORKS = (_b = {},
    _b[types_1.ChainId.Mainnet] = constants_1.Mainnet,
    _b[types_1.ChainId.Alfajores] = constants_1.Alfajores,
    _b[types_1.ChainId.Baklava] = constants_1.Baklava,
    _b);
var MetamaskRPCErrorCode;
(function (MetamaskRPCErrorCode) {
    MetamaskRPCErrorCode[MetamaskRPCErrorCode["AwaitingUserConfirmation"] = -32002] = "AwaitingUserConfirmation";
    MetamaskRPCErrorCode[MetamaskRPCErrorCode["UnrecognizedChainID"] = -32603] = "UnrecognizedChainID";
    MetamaskRPCErrorCode[MetamaskRPCErrorCode["UnknownNetwork"] = 4902] = "UnknownNetwork";
})(MetamaskRPCErrorCode = exports.MetamaskRPCErrorCode || (exports.MetamaskRPCErrorCode = {}));
var makeNetworkParams = function (info, CELO) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, symbol, decimals;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, Promise.all([
                    CELO.symbol(),
                    CELO.decimals(),
                ])];
            case 1:
                _a = __read.apply(void 0, [_c.sent(), 2]), symbol = _a[0], decimals = _a[1];
                return [2 /*return*/, {
                        chainId: "0x".concat(info.chainId.toString(16)),
                        chainName: (_b = params[info.chainId].chainName) !== null && _b !== void 0 ? _b : info.name,
                        nativeCurrency: {
                            name: params[info.chainId].nativeCurrency.name,
                            symbol: symbol,
                            decimals: decimals,
                        },
                        rpcUrls: [info.rpcUrl],
                        blockExplorerUrls: [info.explorer],
                        iconUrls: ["https://celoreserve.org/assets/tokens/".concat(symbol, ".svg")], // unfortunately unused
                    }];
        }
    });
}); };
exports.makeNetworkParams = makeNetworkParams;
var tokenToParam = function (token) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, symbol, decimals, name;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, Promise.all([
                    token.symbol(),
                    token.decimals(),
                    token.name(),
                ])];
            case 1:
                _a = __read.apply(void 0, [_b.sent(), 3]), symbol = _a[0], decimals = _a[1], name = _a[2];
                return [2 /*return*/, {
                        type: 'ERC20',
                        options: {
                            address: token.address,
                            name: name,
                            symbol: symbol,
                            decimals: decimals,
                            image: "https://celoreserve.org/assets/tokens/".concat(symbol, ".svg"),
                        },
                    }];
        }
    });
}); };
exports.tokenToParam = tokenToParam;
var makeAddCeloTokensParams = function (tokens) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    return [2 /*return*/, Promise.all(Object.values(tokens).map(exports.tokenToParam))];
}); }); };
exports.makeAddCeloTokensParams = makeAddCeloTokensParams;
var addTokensToMetamask = function (ethereum, tokens) { return __awaiter(void 0, void 0, void 0, function () {
    var tokenParams, added;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.makeAddCeloTokensParams)(tokens)];
            case 1:
                tokenParams = _a.sent();
                return [4 /*yield*/, Promise.all(tokenParams.map(function (params) {
                        return ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({
                            method: 'wallet_watchAsset',
                            params: params,
                        });
                    }))];
            case 2:
                added = (_a.sent()).every(Boolean);
                return [2 /*return*/, added];
        }
    });
}); };
exports.addTokensToMetamask = addTokensToMetamask;
var addNetworkToMetamask = function (ethereum, networkConfig) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, CELO, tokens, _b, _c, _d, err_1, code;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0: return [4 /*yield*/, (0, contractkit_1.newKit)(networkConfig.rpcUrl).celoTokens.getWrappers()];
            case 1:
                _a = (_f.sent()), CELO = _a.CELO, tokens = __rest(_a, ["CELO"]);
                if (!CELO) {
                    throw new Error("Couldnt fetch CELO information for ".concat(networkConfig.name, ". Something's wrong"));
                }
                _f.label = 2;
            case 2:
                _f.trys.push([2, 8, , 9]);
                if (!(ethereum === null || ethereum === void 0)) return [3 /*break*/, 3];
                _b = void 0;
                return [3 /*break*/, 5];
            case 3:
                _d = (_c = ethereum).request;
                _e = {
                    method: 'wallet_addEthereumChain'
                };
                return [4 /*yield*/, (0, exports.makeNetworkParams)(networkConfig, CELO)];
            case 4:
                _b = _d.apply(_c, [(_e.params = [_f.sent()],
                        _e)]);
                _f.label = 5;
            case 5: return [4 /*yield*/, (_b)];
            case 6:
                _f.sent();
                return [4 /*yield*/, (0, exports.addTokensToMetamask)(ethereum, tokens)];
            case 7:
                _f.sent();
                return [3 /*break*/, 9];
            case 8:
                err_1 = _f.sent();
                code = err_1.code;
                if (code === MetamaskRPCErrorCode.AwaitingUserConfirmation) {
                    // user has already been requested to add the network
                    // maybe add a user CTA
                    throw new Error("Please check your Metamask window to add ".concat(networkConfig.name, " to Metamask"));
                }
                else {
                    throw err_1;
                }
                return [3 /*break*/, 9];
            case 9: return [2 /*return*/];
        }
    });
}); };
exports.addNetworkToMetamask = addNetworkToMetamask;
function addNetworksToMetamask(ethereum) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all(Object.values(NETWORKS).map(function (network) {
                        return (0, exports.addNetworkToMetamask)(ethereum, network);
                    }))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.addNetworksToMetamask = addNetworksToMetamask;
function switchToCeloNetwork(kit, network, ethereum) {
    return __awaiter(this, void 0, void 0, function () {
        var web3, chainId, err_2, code;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    web3 = new web3_1.default(ethereum);
                    return [4 /*yield*/, web3.eth.getChainId()];
                case 1:
                    chainId = _a.sent();
                    if (!(network.chainId !== chainId)) return [3 /*break*/, 8];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 8]);
                    return [4 /*yield*/, ethereum.request({
                            method: 'wallet_switchEthereumChain',
                            params: [
                                {
                                    chainId: "0x".concat(network.chainId.toString(16)),
                                },
                            ],
                        })];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 4:
                    err_2 = _a.sent();
                    code = err_2.code;
                    if (!(code === MetamaskRPCErrorCode.UnknownNetwork ||
                        code === MetamaskRPCErrorCode.UnrecognizedChainID)) return [3 /*break*/, 6];
                    // ChainId not yet added to metamask
                    return [4 /*yield*/, (0, exports.addNetworkToMetamask)(ethereum, network)];
                case 5:
                    // ChainId not yet added to metamask
                    _a.sent();
                    return [2 /*return*/, switchToCeloNetwork(kit, network, ethereum)];
                case 6:
                    if (code === MetamaskRPCErrorCode.AwaitingUserConfirmation) {
                        // user has already been requested to switch the network
                        return [2 /*return*/];
                    }
                    else {
                        throw err_2;
                    }
                    _a.label = 7;
                case 7: return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.switchToCeloNetwork = switchToCeloNetwork;
//# sourceMappingURL=metamask.js.map