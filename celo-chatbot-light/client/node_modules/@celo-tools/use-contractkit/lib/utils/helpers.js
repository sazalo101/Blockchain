"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidFeeCurrency = exports.clearPreviousConfig = exports.loadPreviousConfig = void 0;
var contractkit_1 = require("@celo/contractkit");
var connectors_1 = require("../connectors");
var constants_1 = require("../constants");
var localStorage_1 = __importDefault(require("./localStorage"));
var loadPreviousConfig = function (defaultNetworkProp, defaultFeeCurrencyProp, networks) {
    var _a;
    var lastUsedNetworkName = defaultNetworkProp.name;
    var lastUsedAddress = null;
    var lastUsedWalletType = constants_1.WalletTypes.Unauthenticated;
    var lastUsedWalletArguments = [];
    var lastUsedFeeCurrency = defaultFeeCurrencyProp;
    if (typeof localStorage_1.default !== 'undefined') {
        var localLastUsedNetworkName = localStorage_1.default.getItem(constants_1.localStorageKeys.lastUsedNetwork);
        if (localLastUsedNetworkName) {
            lastUsedNetworkName = localLastUsedNetworkName;
        }
        lastUsedAddress = localStorage_1.default.getItem(constants_1.localStorageKeys.lastUsedAddress);
        var localLastUsedWalletType = localStorage_1.default.getItem(constants_1.localStorageKeys.lastUsedWalletType);
        if (localLastUsedWalletType && localLastUsedWalletType in constants_1.WalletTypes) {
            lastUsedWalletType = localLastUsedWalletType;
        }
        var localLastUsedWalletArguments = localStorage_1.default.getItem(constants_1.localStorageKeys.lastUsedWalletArguments);
        if (localLastUsedWalletArguments) {
            try {
                lastUsedWalletArguments = JSON.parse(localLastUsedWalletArguments);
            }
            catch (e) {
                lastUsedWalletArguments = [];
            }
        }
        var localLastUsedFeeCurrency = localStorage_1.default.getItem(constants_1.localStorageKeys.lastUsedFeeCurrency);
        if (isValidFeeCurrency(localLastUsedFeeCurrency)) {
            lastUsedFeeCurrency = localLastUsedFeeCurrency;
        }
    }
    var lastUsedNetwork = networks.find(function (n) { return n.name === lastUsedNetworkName; });
    var initialConnector;
    if (lastUsedWalletType && lastUsedNetwork) {
        try {
            initialConnector = new ((_a = connectors_1.CONNECTOR_TYPES[lastUsedWalletType]).bind.apply(_a, __spreadArray([void 0, lastUsedNetwork,
                lastUsedFeeCurrency], __read(lastUsedWalletArguments), false)))();
        }
        catch (e) {
            initialConnector = new connectors_1.UnauthenticatedConnector(lastUsedNetwork || defaultNetworkProp);
        }
    }
    else {
        initialConnector = new connectors_1.UnauthenticatedConnector(lastUsedNetwork || defaultNetworkProp);
    }
    return {
        address: lastUsedAddress,
        network: lastUsedNetwork || null,
        connector: initialConnector,
        feeCurrency: lastUsedFeeCurrency,
    };
};
exports.loadPreviousConfig = loadPreviousConfig;
function clearPreviousConfig() {
    Object.values(constants_1.localStorageKeys).forEach(function (val) {
        return localStorage_1.default.removeItem(val);
    });
}
exports.clearPreviousConfig = clearPreviousConfig;
function isValidFeeCurrency(currency) {
    switch (currency) {
        case contractkit_1.CeloContract.GoldToken:
        case contractkit_1.CeloContract.StableToken:
        case contractkit_1.CeloContract.StableTokenEUR:
        case contractkit_1.CeloContract.StableTokenBRL:
            return true;
        default:
            return false;
    }
}
exports.isValidFeeCurrency = isValidFeeCurrency;
//# sourceMappingURL=helpers.js.map