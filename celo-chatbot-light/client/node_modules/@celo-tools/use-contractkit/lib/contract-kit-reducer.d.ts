import { CeloTokenContract } from '@celo/contractkit';
import { Connector, Dapp, Network } from './types';
export declare function contractKitReducer(state: ReducerState, action: Actions): ReducerState;
export interface ReducerState {
    connector: Connector;
    connectorInitError: Error | null;
    dapp: Dapp;
    network: Network;
    networks: Network[];
    pendingActionCount: number;
    address: string | null;
    feeCurrency: CeloTokenContract;
    connectionCallback: ((connector: Connector | false) => void) | null;
}
declare type SetActions = {
    [Key in keyof ReducerState as `set${Capitalize<Key>}`]: ReducerState[Key];
};
export interface ActionsMap extends SetActions {
    decrementPendingActionCount: undefined;
    initialisedConnector: Connector;
    destroy: undefined;
}
export declare type Actions = {
    [Key in keyof ActionsMap]: {
        type: Key;
        payload: ActionsMap[Key];
    };
}[keyof ActionsMap];
export {};
//# sourceMappingURL=contract-kit-reducer.d.ts.map