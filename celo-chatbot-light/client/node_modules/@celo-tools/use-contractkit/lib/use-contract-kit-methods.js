"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useContractKitMethods = void 0;
var react_1 = require("react");
var react_device_detect_1 = require("react-device-detect");
var connectors_1 = require("./connectors");
var constants_1 = require("./constants");
function useContractKitMethods(_a, dispatch) {
    var _this = this;
    var connector = _a.connector, networks = _a.networks, network = _a.network;
    var destroy = (0, react_1.useCallback)(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connector.close()];
                case 1:
                    _a.sent();
                    dispatch('destroy');
                    return [2 /*return*/];
            }
        });
    }); }, [dispatch, connector]);
    var initConnector = (0, react_1.useCallback)(function (nextConnector) { return __awaiter(_this, void 0, void 0, function () {
        var initialisedConnector_1, netId_1, newNetwork, e_1, error;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, nextConnector.initialise()];
                case 1:
                    initialisedConnector_1 = _c.sent();
                    dispatch('initialisedConnector', initialisedConnector_1);
                    return [4 /*yield*/, initialisedConnector_1.kit.web3.eth.net.getId()];
                case 2:
                    netId_1 = _c.sent();
                    newNetwork = networks.find(function (n) { return netId_1 === n.chainId; });
                    if (newNetwork !== network) {
                        dispatch('setNetwork', network);
                    }
                    // This happens if the network changes on the wallet side
                    // and we need to update what network we're storing
                    // accordingly.
                    (_a = initialisedConnector_1.onNetworkChange) === null || _a === void 0 ? void 0 : _a.call(initialisedConnector_1, function (chainId) {
                        var network = networks.find(function (n) { return n.chainId === chainId; });
                        if (netId_1 === chainId || !network)
                            return;
                        // TODO: We should probably throw an error if we can't find the new chainId
                        if (network) {
                            dispatch('setNetwork', network);
                            initialisedConnector_1.updateKitWithNetwork &&
                                initialisedConnector_1
                                    .updateKitWithNetwork(network)
                                    .then(function () {
                                    dispatch('initialisedConnector', initialisedConnector_1);
                                })
                                    .catch(function (e) {
                                    console.error('[use-contractkit] Error switching network', nextConnector.type, e);
                                    var error = e instanceof Error
                                        ? e
                                        : new Error("Failed to initialise connector with ".concat(network.name));
                                    dispatch('setConnectorInitError', error);
                                    throw e;
                                });
                        }
                    });
                    (_b = initialisedConnector_1.onAddressChange) === null || _b === void 0 ? void 0 : _b.call(initialisedConnector_1, function (address) {
                        dispatch('setAddress', address);
                    });
                    return [2 /*return*/, initialisedConnector_1];
                case 3:
                    e_1 = _c.sent();
                    console.error('[use-contractkit] Error initializing connector', nextConnector.type, e_1);
                    error = e_1 instanceof Error ? e_1 : new Error('Failed to initialise connector');
                    dispatch('setConnectorInitError', error);
                    throw e_1;
                case 4: return [2 /*return*/];
            }
        });
    }); }, [dispatch, network, networks]);
    // This is just to be used to for users to explicitly change
    // the network. It doesn't work for all wallets.
    var updateNetwork = (0, react_1.useCallback)(function (newNetwork) { return __awaiter(_this, void 0, void 0, function () {
        var connectorArgs, ConnectorConstructor, newConnector;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (constants_1.STATIC_NETWORK_WALLETS.includes(connector.type)) {
                        throw new Error("The connected wallet's network must be changed from the wallet.");
                    }
                    if (network === newNetwork)
                        return [2 /*return*/];
                    if (!connector.initialised) return [3 /*break*/, 3];
                    connectorArgs = JSON.parse(localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletArguments) || '[]');
                    return [4 /*yield*/, connector.close()];
                case 1:
                    _a.sent();
                    ConnectorConstructor = connectors_1.CONNECTOR_TYPES[connector.type];
                    newConnector = new (ConnectorConstructor.bind.apply(ConnectorConstructor, __spreadArray([void 0, newNetwork], __read(connectorArgs), false)))();
                    return [4 /*yield*/, initConnector(newConnector)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    dispatch('setNetwork', newNetwork);
                    return [2 /*return*/];
            }
        });
    }); }, [dispatch, connector, network, initConnector]);
    var connect = (0, react_1.useCallback)(function () { return __awaiter(_this, void 0, void 0, function () {
        var connectionResultPromise, newConnector;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    connectionResultPromise = new Promise(function (resolve) {
                        dispatch('setConnectionCallback', resolve);
                    });
                    return [4 /*yield*/, connectionResultPromise];
                case 1:
                    newConnector = _a.sent();
                    dispatch('setConnectionCallback', null);
                    if (newConnector === false) {
                        throw new Error('Connection cancelled');
                    }
                    return [2 /*return*/, newConnector];
            }
        });
    }); }, [dispatch]);
    var getConnectedKit = (0, react_1.useCallback)(function () { return __awaiter(_this, void 0, void 0, function () {
        var initialisedConnection;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    initialisedConnection = connector;
                    if (!(connector.type === constants_1.WalletTypes.Unauthenticated)) return [3 /*break*/, 2];
                    return [4 /*yield*/, connect()];
                case 1:
                    initialisedConnection = _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    if (!!initialisedConnection.initialised) return [3 /*break*/, 4];
                    return [4 /*yield*/, initConnector(initialisedConnection)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [2 /*return*/, initialisedConnection.kit];
            }
        });
    }); }, [connect, connector, initConnector]);
    var updateFeeCurrency = (0, react_1.useCallback)(function (newFeeCurrency) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connector.updateFeeCurrency(newFeeCurrency)];
                case 1:
                    _a.sent();
                    dispatch('setFeeCurrency', newFeeCurrency);
                    return [2 /*return*/];
            }
        });
    }); }, [connector, dispatch]);
    var performActions = (0, react_1.useCallback)(function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            var kit, results, operations_1, operations_1_1, op, _a, _b, e_2, e_3_1;
            var e_3, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, getConnectedKit()];
                    case 1:
                        kit = _d.sent();
                        dispatch('setPendingActionCount', operations.length);
                        results = [];
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 10, 11, 12]);
                        operations_1 = __values(operations), operations_1_1 = operations_1.next();
                        _d.label = 3;
                    case 3:
                        if (!!operations_1_1.done) return [3 /*break*/, 9];
                        op = operations_1_1.value;
                        _d.label = 4;
                    case 4:
                        _d.trys.push([4, 6, , 7]);
                        // When on mobile direct user to their wallet app.
                        if (react_device_detect_1.isMobile && connector.getDeeplinkUrl) {
                            window.open(connector.getDeeplinkUrl(''), '_blank');
                        }
                        _b = (_a = results).push;
                        return [4 /*yield*/, op(kit)];
                    case 5:
                        _b.apply(_a, [_d.sent()]);
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _d.sent();
                        dispatch('setPendingActionCount', 0);
                        throw e_2;
                    case 7:
                        dispatch('decrementPendingActionCount');
                        _d.label = 8;
                    case 8:
                        operations_1_1 = operations_1.next();
                        return [3 /*break*/, 3];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (operations_1_1 && !operations_1_1.done && (_c = operations_1.return)) _c.call(operations_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 12: return [2 /*return*/, results];
                }
            });
        });
    }, [getConnectedKit, dispatch, connector]);
    return {
        destroy: destroy,
        initConnector: initConnector,
        updateNetwork: updateNetwork,
        connect: connect,
        getConnectedKit: getConnectedKit,
        performActions: performActions,
        updateFeeCurrency: updateFeeCurrency,
    };
}
exports.useContractKitMethods = useContractKitMethods;
//# sourceMappingURL=use-contract-kit-methods.js.map