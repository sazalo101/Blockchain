"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_NETWORKS = exports.getProviderForWallet = exports.STATIC_NETWORK_WALLETS = exports.WalletIds = exports.Localhost = exports.Mainnet = exports.Baklava = exports.Alfajores = exports.NetworkNames = exports.images = exports.PROVIDERS = exports.WalletTypes = exports.SupportedProviders = exports.localStorageKeys = void 0;
var react_1 = __importDefault(require("react"));
var react_device_detect_1 = require("react-device-detect");
var types_1 = require("./types");
var ethereum_1 = require("./utils/ethereum");
var walletIcons_1 = require("./walletIcons");
exports.localStorageKeys = {
    lastUsedAddress: 'use-contractkit/last-used-address',
    lastUsedNetwork: 'use-contractkit/last-used-network',
    lastUsedWalletType: 'use-contractkit/last-used-wallet',
    lastUsedWalletArguments: 'use-contractkit/last-used-wallet-arguments',
    lastUsedFeeCurrency: 'use-contractkit/last-used-fee-currency',
};
var SupportedProviders;
(function (SupportedProviders) {
    SupportedProviders["CeloExtensionWallet"] = "Celo Extension Wallet";
    SupportedProviders["CeloTerminal"] = "Celo Terminal";
    SupportedProviders["CeloWallet"] = "Celo Wallet";
    SupportedProviders["CeloDance"] = "CeloDance";
    SupportedProviders["Injected"] = "Injected";
    SupportedProviders["Ledger"] = "Ledger";
    SupportedProviders["MetaMask"] = "MetaMask";
    SupportedProviders["PrivateKey"] = "Private key";
    SupportedProviders["Valora"] = "Valora";
    SupportedProviders["WalletConnect"] = "WalletConnect";
})(SupportedProviders = exports.SupportedProviders || (exports.SupportedProviders = {}));
var WalletTypes;
(function (WalletTypes) {
    WalletTypes["Valora"] = "Valora";
    WalletTypes["MetaMask"] = "MetaMask";
    WalletTypes["WalletConnect"] = "WalletConnect";
    WalletTypes["CeloDance"] = "CeloDance";
    WalletTypes["CeloWallet"] = "CeloWallet";
    WalletTypes["CeloTerminal"] = "CeloTerminal";
    WalletTypes["CeloExtensionWallet"] = "CeloExtensionWallet";
    WalletTypes["Ledger"] = "Ledger";
    WalletTypes["Injected"] = "Injected";
    WalletTypes["PrivateKey"] = "PrivateKey";
    WalletTypes["Unauthenticated"] = "Unauthenticated";
})(WalletTypes = exports.WalletTypes || (exports.WalletTypes = {}));
exports.PROVIDERS = (_a = {},
    _a[SupportedProviders.Valora] = {
        name: SupportedProviders.Valora,
        type: WalletTypes.WalletConnect,
        description: 'Connect to Valora, a mobile payments app that works worldwide',
        icon: walletIcons_1.VALORA,
        canConnect: function () { return true; },
        showInList: function () { return true; },
        listPriority: function () { return 0; },
        installURL: 'https://valoraapp.com/',
    },
    _a[SupportedProviders.WalletConnect] = {
        name: SupportedProviders.WalletConnect,
        type: WalletTypes.WalletConnect,
        description: 'Scan a QR code to connect your wallet',
        icon: walletIcons_1.WALLETCONNECT,
        canConnect: function () { return true; },
        showInList: function () { return true; },
        listPriority: function () { return 0; },
    },
    _a[SupportedProviders.Ledger] = {
        name: SupportedProviders.Ledger,
        type: WalletTypes.Ledger,
        description: 'Sync with your Ledger hardware wallet',
        icon: walletIcons_1.LEDGER,
        canConnect: function () { return true; },
        showInList: function () { return !react_device_detect_1.isMobile; },
        listPriority: function () { return 0; },
    },
    _a[SupportedProviders.CeloWallet] = {
        name: SupportedProviders.CeloWallet,
        type: WalletTypes.WalletConnect,
        description: 'Connect to Celo Wallet for web or desktop',
        icon: walletIcons_1.CELO,
        canConnect: function () { return true; },
        showInList: function () { return true; },
        listPriority: function () { return (!react_device_detect_1.isMobile ? 0 : 1); },
    },
    _a[SupportedProviders.CeloTerminal] = {
        name: SupportedProviders.CeloTerminal,
        type: WalletTypes.WalletConnect,
        description: 'Connect to the Celo Terminal desktop app',
        // TODO get SVG icon
        icon: 'https://raw.githubusercontent.com/zviadm/celoterminal/main/static/icon.png',
        canConnect: function () { return true; },
        showInList: function () { return !react_device_detect_1.isMobile; },
        listPriority: function () { return 1; },
    },
    _a[SupportedProviders.MetaMask] = {
        name: SupportedProviders.MetaMask,
        type: WalletTypes.MetaMask,
        description: react_device_detect_1.isMobile ? ((0, ethereum_1.isEthereumFromMetamask)() ? ('Connect with MetaMask Mobile App') : ('Open MetaMask Mobile App')) : (react_1.default.createElement(react_1.default.Fragment, null,
            "Use the Metamask browser extension. Celo support is limited.",
            ' ',
            react_1.default.createElement("a", { href: "https://docs.celo.org/getting-started/wallets/using-metamask-with-celo", target: "_blank", onClick: function (e) {
                    e.stopPropagation();
                    e.nativeEvent.stopPropagation();
                }, className: "tw-underline tw-text-gray-900 dark:tw-text-gray-200 tw-font-medium", rel: "noopener noreferrer" }, "Learn more"))),
        icon: walletIcons_1.METAMASK,
        canConnect: function () { return (0, ethereum_1.isEthereumFromMetamask)(); },
        showInList: function () { return true; },
        listPriority: function () { return 0; },
        installURL: 'https://metamask.app.link/',
    },
    _a[SupportedProviders.CeloExtensionWallet] = {
        name: SupportedProviders.CeloExtensionWallet,
        type: WalletTypes.CeloExtensionWallet,
        description: 'Use a wallet from the the Celo chrome extension',
        icon: walletIcons_1.CHROME_EXTENSION_STORE,
        canConnect: function () { return !!window.celo; },
        showInList: function () { return !react_device_detect_1.isMobile; },
        listPriority: function () { return 1; },
        installURL: 'https://chrome.google.com/webstore/detail/celoextensionwallet/kkilomkmpmkbdnfelcpgckmpcaemjcdh/related',
    },
    _a[SupportedProviders.Injected] = {
        name: SupportedProviders.Injected,
        type: WalletTypes.Injected,
        description: 'Connect any Ethereum wallet to Celo',
        icon: walletIcons_1.ETHEREUM,
        canConnect: function () { return (0, ethereum_1.isEthereumPresent)(); },
        showInList: function () { return (0, ethereum_1.isEthereumFromMetamask)(); },
        listPriority: function () { return 1; },
    },
    _a[SupportedProviders.PrivateKey] = {
        name: SupportedProviders.PrivateKey,
        type: WalletTypes.PrivateKey,
        description: 'Enter a plaintext private key to load your account (testing only)',
        icon: walletIcons_1.PRIVATE_KEY,
        canConnect: function () { return true; },
        showInList: function () { return process.env.NODE_ENV !== 'production'; },
        listPriority: function () { return 1; },
    },
    _a[SupportedProviders.CeloDance] = {
        name: SupportedProviders.CeloDance,
        type: WalletTypes.WalletConnect,
        description: 'Send, vote, and earn rewards within one wallet',
        icon: walletIcons_1.CELO_DANCE,
        canConnect: function () { return true; },
        showInList: function () { return true; },
        listPriority: function () { return 1; },
        installURL: 'https://celo.dance/',
    },
    _a);
exports.images = (_b = {},
    _b[SupportedProviders.Valora] = walletIcons_1.VALORA,
    _b[SupportedProviders.MetaMask] = walletIcons_1.METAMASK,
    _b[SupportedProviders.WalletConnect] = walletIcons_1.WALLETCONNECT,
    _b[SupportedProviders.Ledger] = walletIcons_1.LEDGER,
    _b[SupportedProviders.CeloWallet] = walletIcons_1.CELO,
    _b[SupportedProviders.CeloDance] = walletIcons_1.CELO_DANCE,
    _b[SupportedProviders.CeloTerminal] = walletIcons_1.CELO,
    _b[SupportedProviders.CeloExtensionWallet] = walletIcons_1.CHROME_EXTENSION_STORE,
    _b[SupportedProviders.PrivateKey] = walletIcons_1.PRIVATE_KEY,
    _b);
var NetworkNames;
(function (NetworkNames) {
    NetworkNames["Alfajores"] = "Alfajores";
    NetworkNames["Baklava"] = "Baklava";
    NetworkNames["Mainnet"] = "Mainnet";
    NetworkNames["Localhost"] = "Localhost";
})(NetworkNames = exports.NetworkNames || (exports.NetworkNames = {}));
exports.Alfajores = {
    name: NetworkNames.Alfajores,
    rpcUrl: 'https://alfajores-forno.celo-testnet.org',
    graphQl: 'https://alfajores-blockscout.celo-testnet.org/graphiql',
    explorer: 'https://alfajores-blockscout.celo-testnet.org',
    chainId: types_1.ChainId.Alfajores,
};
exports.Baklava = {
    name: NetworkNames.Baklava,
    rpcUrl: 'https://baklava-forno.celo-testnet.org',
    graphQl: 'https://baklava-blockscout.celo-testnet.org/graphiql',
    explorer: 'https://baklava-blockscout.celo-testnet.org',
    chainId: types_1.ChainId.Baklava,
};
exports.Mainnet = {
    name: NetworkNames.Mainnet,
    rpcUrl: 'https://forno.celo.org',
    graphQl: 'https://explorer.celo.org/graphiql',
    explorer: 'https://explorer.celo.org',
    chainId: types_1.ChainId.Mainnet,
};
exports.Localhost = {
    name: NetworkNames.Localhost,
    rpcUrl: 'http://localhost:8545',
    graphQl: '',
    explorer: '',
    chainId: 1337,
};
var WalletIds;
(function (WalletIds) {
    WalletIds["Valora"] = "d01c7758d741b363e637a817a09bcf579feae4db9f5bb16f599fdd1f66e2f974";
    WalletIds["CeloWallet"] = "36d854b702817e228d5c853c528d7bdb46f4bb041d255f67b82eb47111e5676b";
    WalletIds["CeloDance"] = "TODO";
    WalletIds["CeloTerminal"] = "8f8506b7f191a8ab95a8295fc8ca147aa152b1358bee4283d6ad2468d97e0ca4";
})(WalletIds = exports.WalletIds || (exports.WalletIds = {}));
/**
 * These wallets cannot have their networks
 * updated via use-contractkit
 */
exports.STATIC_NETWORK_WALLETS = [WalletTypes['CeloExtensionWallet']];
/**
 * Gets the provider associated with a wallet type.
 * @param wallet
 * @returns
 */
var getProviderForWallet = function (wallet) {
    return wallet === WalletTypes.Unauthenticated ? null : SupportedProviders[wallet];
};
exports.getProviderForWallet = getProviderForWallet;
/**
 * Default networks to connect to.
 */
exports.DEFAULT_NETWORKS = __spreadArray([
    exports.Mainnet,
    exports.Alfajores,
    exports.Baklava
], __read((process.env.NODE_ENV !== 'production' ? [exports.Localhost] : [])), false);
//# sourceMappingURL=constants.js.map