"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractKitReducer = void 0;
var connectors_1 = require("./connectors");
var constants_1 = require("./constants");
var helpers_1 = require("./utils/helpers");
var localStorage_1 = __importDefault(require("./utils/localStorage"));
function contractKitReducer(state, action) {
    var _a;
    var _b;
    switch (action.type) {
        case 'decrementPendingActionCount':
            return __assign(__assign({}, state), { pendingActionCount: state.pendingActionCount - 1 });
        case 'setAddress':
            if (action.payload === state.address) {
                return state;
            }
            if (action.payload) {
                localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedAddress, action.payload);
            }
            else {
                localStorage_1.default.removeItem(constants_1.localStorageKeys.lastUsedAddress);
            }
            return __assign(__assign({}, state), { address: action.payload });
        case 'setNetwork':
            if (action.payload === state.network) {
                return state;
            }
            localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedNetwork, action.payload.name);
            return __assign(__assign({}, state), { network: action.payload });
        case 'setConnector':
            localStorage_1.default.removeItem(constants_1.localStorageKeys.lastUsedAddress);
            return __assign(__assign({}, state), { connector: action.payload, connectorInitError: null, address: null });
        case 'setFeeCurrency':
            if (action.payload === state.feeCurrency) {
                return state;
            }
            localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedFeeCurrency, action.payload);
            return __assign(__assign({}, state), { feeCurrency: action.payload });
        case 'initialisedConnector': {
            var newConnector = action.payload;
            var address = (_b = newConnector.kit.defaultAccount) !== null && _b !== void 0 ? _b : null;
            if (address) {
                localStorage_1.default.setItem(constants_1.localStorageKeys.lastUsedAddress, address);
            }
            return __assign(__assign({}, state), { connector: action.payload, address: address });
        }
        case 'destroy':
            (0, helpers_1.clearPreviousConfig)();
            return __assign(__assign({}, state), { address: null, connector: new connectors_1.UnauthenticatedConnector(state.network) });
        default:
            // This checks to see if the action type is `set<fieldname>`
            if (action.type.slice(0, 3) === 'set') {
                // This builds the proper camel-case field name from the action type
                // e.g., setFieldName -> fieldName
                var key = "".concat(action.type.charAt(3).toLowerCase()).concat(action.type.slice(4));
                return __assign(__assign({}, state), (_a = {}, _a[key] = action.payload, _a));
            }
            else {
                console.error(new Error("Unrecognized action type ".concat(action.type, " in contractKitReducer")));
            }
            return state;
    }
}
exports.contractKitReducer = contractKitReducer;
//# sourceMappingURL=contract-kit-reducer.js.map