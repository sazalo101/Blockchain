import { BlockchainParameters } from '@celo/abis/web3/BlockchainParameters';
import { BigNumber } from 'bignumber.js';
import { BaseWrapper } from './BaseWrapper';
export interface BlockchainParametersConfig {
    blockGasLimit: BigNumber;
    intrinsicGasForAlternativeFeeCurrency: BigNumber;
}
/**
 * Network parameters that are configurable by governance.
 */
export declare class BlockchainParametersWrapper extends BaseWrapper<BlockchainParameters> {
    /**
     * Get the extra intrinsic gas for transactions, where gas is paid using non-gold currency.
     */
    getIntrinsicGasForAlternativeFeeCurrency: () => Promise<BigNumber>;
    /**
     * Setting the extra intrinsic gas for transactions, where gas is paid using non-gold currency.
     */
    setIntrinsicGasForAlternativeFeeCurrency: (gas: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    /**
     * Getting the block gas limit.
     */
    getBlockGasLimit: () => Promise<BigNumber>;
    /**
     * Setting the block gas limit.
     */
    setBlockGasLimit: (gasLimit: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    /**
     * Returns current configuration parameters.
     */
    getConfig(): Promise<BlockchainParametersConfig>;
    /**
     * Getting the uptime lookback window.
     */
    getUptimeLookbackWindow: () => Promise<number>;
    /**
     * Setting the uptime lookback window.
     */
    setUptimeLookbackWindow: (window: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    getEpochSizeNumber(): Promise<number>;
    getFirstBlockNumberForEpoch(epochNumber: number): Promise<number>;
    getLastBlockNumberForEpoch(epochNumber: number): Promise<number>;
    getEpochNumberOfBlock(blockNumber: number): Promise<number>;
    getEpochNumber: () => Promise<BigNumber>;
    getEpochSize: () => Promise<BigNumber>;
}
export type BlockchainParametersWrapperType = BlockchainParametersWrapper;
