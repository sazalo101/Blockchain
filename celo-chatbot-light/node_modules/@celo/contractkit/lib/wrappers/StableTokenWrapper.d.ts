import { StableToken } from '@celo/abis/web3/mento/StableToken';
import { CeloTokenWrapper } from './CeloTokenWrapper';
export interface StableTokenConfig {
    decimals: number;
    name: string;
    symbol: string;
}
/**
 * Stable token with variable supply
 */
export declare class StableTokenWrapper extends CeloTokenWrapper<StableToken> {
    /**
     * Returns the address of the owner of the contract.
     * @return the address of the owner of the contract.
     */
    owner: () => Promise<string>;
    /**
     * Increases the allowance of another user.
     * @param spender The address which is being approved to spend StableToken.
     * @param value The increment of the amount of StableToken approved to the spender.
     * @returns true if success.
     */
    increaseAllowance: (args_0: string, args_1: import("bignumber.js").default.Value) => import("@celo/connect").CeloTransactionObject<boolean>;
    /**
     * Decreases the allowance of another user.
     * @param spender The address which is being approved to spend StableToken.
     * @param value The decrement of the amount of StableToken approved to the spender.
     * @returns true if success.
     */
    decreaseAllowance: (spender: string, value: string | number) => import("@celo/connect").CeloTransactionObject<boolean>;
    mint: (to: string, value: string | number) => import("@celo/connect").CeloTransactionObject<boolean>;
    burn: (value: string | number) => import("@celo/connect").CeloTransactionObject<boolean>;
    /**
     * Returns current configuration parameters.
     */
    getConfig(): Promise<StableTokenConfig>;
    /**
     * @dev Returns human readable configuration of the stabletoken contract
     * @return StableTokenConfig object
     */
    getHumanReadableConfig(): Promise<StableTokenConfig>;
}
export type StableTokenWrapperType = StableTokenWrapper;
