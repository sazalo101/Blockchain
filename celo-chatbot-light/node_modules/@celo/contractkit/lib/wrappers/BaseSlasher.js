"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseSlasher = void 0;
const address_1 = require("@celo/base/lib/address");
const connect_1 = require("@celo/connect");
const BaseWrapper_1 = require("./BaseWrapper");
const BaseWrapperForGoverning_1 = require("./BaseWrapperForGoverning");
class BaseSlasher extends BaseWrapperForGoverning_1.BaseWrapperForGoverning {
    constructor() {
        super(...arguments);
        this.slash = (...args) => (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.slash(...args));
        /**
         * Returns slashing incentives.
         * @return Rewards and penalties for slashing.
         */
        this.slashingIncentives = (0, BaseWrapper_1.proxyCall)(this.contract.methods.slashingIncentives, undefined, (res) => ({
            reward: (0, BaseWrapper_1.valueToBigNumber)(res.reward),
            penalty: (0, BaseWrapper_1.valueToBigNumber)(res.penalty),
        }));
    }
    signerIndexAtBlock(address, blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const election = yield this.contracts.getElection();
            const validators = yield this.contracts.getValidators();
            const validator = yield validators.getValidator(address, blockNumber);
            return (0, address_1.findAddressIndex)(validator.signer, yield election.getValidatorSigners(blockNumber));
        });
    }
    trailingSlashArgs(address, blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const validators = yield this.contracts.getValidators();
            const account = yield validators.validatorSignerToAccount(address);
            const membership = yield validators.getValidatorMembershipHistoryIndex(account, blockNumber);
            const incentives = yield this.slashingIncentives();
            const lockedGold = yield this.contracts.getLockedGold();
            const lockedGoldValidatorSlash = yield lockedGold.computeInitialParametersForSlashing(account, incentives.penalty);
            const lockedGoldValidatorGroupSlash = yield lockedGold.computeParametersForSlashing(membership.group, incentives.penalty, lockedGoldValidatorSlash.list);
            return [
                membership.historyIndex,
                lockedGoldValidatorSlash.lessers,
                lockedGoldValidatorSlash.greaters,
                lockedGoldValidatorSlash.indices,
                lockedGoldValidatorGroupSlash.lessers,
                lockedGoldValidatorGroupSlash.greaters,
                lockedGoldValidatorGroupSlash.indices,
            ];
        });
    }
}
exports.BaseSlasher = BaseSlasher;
//# sourceMappingURL=BaseSlasher.js.map