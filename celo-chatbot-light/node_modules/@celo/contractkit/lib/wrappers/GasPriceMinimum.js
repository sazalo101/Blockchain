"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasPriceMinimumWrapper = void 0;
const BaseWrapper_1 = require("./BaseWrapper");
/**
 * Stores the gas price minimum
 */
class GasPriceMinimumWrapper extends BaseWrapper_1.BaseWrapper {
    constructor() {
        super(...arguments);
        /**
         * Query current gas price minimum in CELO.
         * @returns current gas price minimum in CELO
         */
        this.gasPriceMinimum = (0, BaseWrapper_1.proxyCall)(this.contract.methods.gasPriceMinimum, undefined, BaseWrapper_1.valueToBigNumber);
        /**
         * Query current gas price minimum.
         * @returns current gas price minimum in the requested currency
         */
        this.getGasPriceMinimum = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getGasPriceMinimum, undefined, BaseWrapper_1.valueToBigNumber);
        /**
         * Query target density parameter.
         * @returns the current block density targeted by the gas price minimum algorithm.
         */
        this.targetDensity = (0, BaseWrapper_1.proxyCall)(this.contract.methods.targetDensity, undefined, BaseWrapper_1.fixidityValueToBigNumber);
        /**
         * Query adjustment speed parameter
         * @returns multiplier that impacts how quickly gas price minimum is adjusted.
         */
        this.adjustmentSpeed = (0, BaseWrapper_1.proxyCall)(this.contract.methods.adjustmentSpeed, undefined, BaseWrapper_1.fixidityValueToBigNumber);
    }
    /**
     * Returns current configuration parameters.
     */
    getConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield Promise.all([
                this.gasPriceMinimum(),
                this.targetDensity(),
                this.adjustmentSpeed(),
            ]);
            return {
                gasPriceMinimum: res[0],
                targetDensity: res[1],
                adjustmentSpeed: res[2],
            };
        });
    }
}
exports.GasPriceMinimumWrapper = GasPriceMinimumWrapper;
//# sourceMappingURL=GasPriceMinimum.js.map