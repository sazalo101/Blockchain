/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface CeloDistributionSchedule extends Contract {
    clone(): CeloDistributionSchedule;
    methods: {
        areDependenciesSet(): CeloTxObject<boolean>;
        carbonOffsettingPartner(): CeloTxObject<string>;
        communityRewardFund(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isL2(): CeloTxObject<boolean>;
        l2StartTime(): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        totalAllocatedAtL2Start(): CeloTxObject<string>;
        totalDistributedBySchedule(): CeloTxObject<string>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        initialize(registryAddress: string): CeloTxObject<void>;
        activate(_l2StartTime: number | string, _communityRewardFraction: number | string, _carbonOffsettingPartner: string, _carbonOffsettingFraction: number | string): CeloTxObject<void>;
        distributeAccordingToSchedule(): CeloTxObject<boolean>;
        getCommunityRewardFraction(): CeloTxObject<string>;
        getCarbonOffsettingFraction(): CeloTxObject<string>;
        getTotalDistributedBySchedule(): CeloTxObject<string>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        setCommunityRewardFraction(value: number | string): CeloTxObject<boolean>;
        setCarbonOffsettingFund(partner: string, value: number | string): CeloTxObject<boolean>;
        getRemainingBalanceToDistribute(): CeloTxObject<string>;
        getDistributableAmount(): CeloTxObject<string>;
        getTargetCeloDistribution(): CeloTxObject<{
            targetCeloDistribution: string;
            communityTargetRewards: string;
            carbonFundTargetRewards: string;
            0: string;
            1: string;
            2: string;
        }>;
    };
    events: {
        CarbonOffsettingFundSet: ContractEvent<{
            partner: string;
            fraction: string;
            0: string;
            1: string;
        }>;
        CommunityRewardFractionSet: ContractEvent<string>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newCeloDistributionSchedule(web3: Web3, address: string): CeloDistributionSchedule;
