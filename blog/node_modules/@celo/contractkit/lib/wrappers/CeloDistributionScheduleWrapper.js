"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CeloDistributionScheduleWrapper = void 0;
const BaseWrapper_1 = require("./BaseWrapper");
class CeloDistributionScheduleWrapper extends BaseWrapper_1.BaseWrapper {
    constructor() {
        super(...arguments);
        this.carbonOffsettingPartner = (0, BaseWrapper_1.proxyCall)(this.contract.methods.carbonOffsettingPartner);
        this.communityRewardFund = (0, BaseWrapper_1.proxyCall)(this.contract.methods.communityRewardFund);
        this.getCommunityRewardFraction = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getCommunityRewardFraction, undefined, BaseWrapper_1.valueToString);
        this.getCarbonOffsettingFraction = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getCarbonOffsettingFraction, undefined, BaseWrapper_1.valueToString);
        this.getRemainingBalanceToDistribute = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getRemainingBalanceToDistribute, undefined, BaseWrapper_1.valueToString);
        this.getTotalDistributedBySchedule = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getTotalDistributedBySchedule, undefined, BaseWrapper_1.valueToString);
        this.getDistributableAmount = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getDistributableAmount, undefined, BaseWrapper_1.valueToString);
        this.getTargetCeloDistribution = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getTargetCeloDistribution, undefined, (res) => ({
            carbonFundTargetRewards: (0, BaseWrapper_1.valueToString)(res.carbonFundTargetRewards),
            communityTargetRewards: (0, BaseWrapper_1.valueToString)(res.communityTargetRewards),
            targetCeloDistribution: (0, BaseWrapper_1.valueToString)(res.targetCeloDistribution),
        }));
        this.distributeAccordingToSchedule = (0, BaseWrapper_1.proxySend)(this.connection, this.contract.methods.distributeAccordingToSchedule);
    }
    getConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                carbonOffsetting: {
                    fraction: yield this.getCarbonOffsettingFraction(),
                    partner: yield this.carbonOffsettingPartner(),
                },
                communityReward: {
                    fraction: yield this.getCommunityRewardFraction(),
                    fund: yield this.communityRewardFund(),
                },
                distributableAmount: yield this.getDistributableAmount(),
                targetCeloDistribution: yield this.getTargetCeloDistribution(),
            };
        });
    }
}
exports.CeloDistributionScheduleWrapper = CeloDistributionScheduleWrapper;
//# sourceMappingURL=CeloDistributionScheduleWrapper.js.map