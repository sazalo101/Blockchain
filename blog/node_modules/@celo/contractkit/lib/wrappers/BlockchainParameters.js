"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainParametersWrapper = void 0;
const BaseWrapper_1 = require("./BaseWrapper");
/**
 * Network parameters that are configurable by governance.
 */
class BlockchainParametersWrapper extends BaseWrapper_1.BaseWrapper {
    constructor() {
        super(...arguments);
        /**
         * Get the extra intrinsic gas for transactions, where gas is paid using non-gold currency.
         */
        this.getIntrinsicGasForAlternativeFeeCurrency = (0, BaseWrapper_1.proxyCall)(this.contract.methods.intrinsicGasForAlternativeFeeCurrency, undefined, BaseWrapper_1.valueToBigNumber);
        /**
         * Setting the extra intrinsic gas for transactions, where gas is paid using non-gold currency.
         */
        this.setIntrinsicGasForAlternativeFeeCurrency = (0, BaseWrapper_1.proxySend)(this.connection, this.contract.methods.setIntrinsicGasForAlternativeFeeCurrency);
        /**
         * Getting the block gas limit.
         */
        this.getBlockGasLimit = (0, BaseWrapper_1.proxyCall)(this.contract.methods.blockGasLimit, undefined, BaseWrapper_1.valueToBigNumber);
        /**
         * Setting the block gas limit.
         */
        this.setBlockGasLimit = (0, BaseWrapper_1.proxySend)(this.connection, this.contract.methods.setBlockGasLimit);
        /**
         * Getting the uptime lookback window.
         */
        this.getUptimeLookbackWindow = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getUptimeLookbackWindow, undefined, BaseWrapper_1.valueToInt);
        /**
         * Setting the uptime lookback window.
         */
        this.setUptimeLookbackWindow = (0, BaseWrapper_1.proxySend)(this.connection, this.contract.methods.setUptimeLookbackWindow);
        this.getEpochNumber = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getEpochNumber, undefined, BaseWrapper_1.valueToBigNumber);
        this.getEpochSize = (0, BaseWrapper_1.proxyCall)(this.contract.methods.getEpochSize, undefined, BaseWrapper_1.valueToBigNumber);
    }
    /**
     * Returns current configuration parameters.
     */
    getConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                blockGasLimit: yield this.getBlockGasLimit(),
                intrinsicGasForAlternativeFeeCurrency: yield this.getIntrinsicGasForAlternativeFeeCurrency(),
            };
        });
    }
    getEpochSizeNumber() {
        return __awaiter(this, void 0, void 0, function* () {
            const epochSize = yield this.getEpochSize();
            return epochSize.toNumber();
        });
    }
    getFirstBlockNumberForEpoch(epochNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const epochSize = yield this.getEpochSizeNumber();
            // Follows GetEpochFirstBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
            if (epochNumber === 0) {
                // No first block for epoch 0
                return 0;
            }
            return (epochNumber - 1) * epochSize + 1;
        });
    }
    getLastBlockNumberForEpoch(epochNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const epochSize = yield this.getEpochSizeNumber();
            // Follows GetEpochLastBlockNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
            if (epochNumber === 0) {
                return 0;
            }
            const firstBlockNumberForEpoch = yield this.getFirstBlockNumberForEpoch(epochNumber);
            return firstBlockNumberForEpoch + (epochSize - 1);
        });
    }
    getEpochNumberOfBlock(blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const epochSize = yield this.getEpochSizeNumber();
            // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go
            const epochNumber = Math.floor(blockNumber / epochSize);
            if (blockNumber % epochSize === 0) {
                return epochNumber;
            }
            else {
                return epochNumber + 1;
            }
        });
    }
}
exports.BlockchainParametersWrapper = BlockchainParametersWrapper;
//# sourceMappingURL=BlockchainParameters.js.map