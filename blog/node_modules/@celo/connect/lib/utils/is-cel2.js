"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCel2 = exports.PROXY_ADMIN_ADDRESS = void 0;
/*
 * This util checks if we're in L2 context, it's a port of the technique used in
 * https://github.com/celo-org/celo-monorepo/blob/da9b4955c1fdc8631980dc4adf9b05e0524fc228/packages/protocol/contracts-0.8/common/IsL2Check.sol#L17
 */
exports.PROXY_ADMIN_ADDRESS = '0x4200000000000000000000000000000000000018';
const isCel2 = (web3) => __awaiter(void 0, void 0, void 0, function* () {
    const code = yield web3.eth.getCode(exports.PROXY_ADMIN_ADDRESS);
    if (typeof code === 'string') {
        return code != '0x' && code.length > 2;
    }
    return false;
});
exports.isCel2 = isCel2;
//# sourceMappingURL=is-cel2.js.map