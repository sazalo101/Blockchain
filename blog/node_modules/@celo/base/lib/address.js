"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapAddressListDataOnto = exports.mapAddressListOnto = exports.findAddressIndex = exports.NULL_ADDRESS = exports.bufferToHex = exports.hexToBuffer = exports.isHexString = exports.getAddressChunks = exports.ensureLeading0x = exports.trimLeading0x = exports.normalizeAddressWith0x = exports.isNullAddress = exports.normalizeAddress = exports.eqAddress = void 0;
const HEX_REGEX = /^0x[0-9A-F]*$/i;
const eqAddress = (a, b) => (0, exports.normalizeAddress)(a) === (0, exports.normalizeAddress)(b);
exports.eqAddress = eqAddress;
const normalizeAddress = (a) => (0, exports.trimLeading0x)(a).toLowerCase();
exports.normalizeAddress = normalizeAddress;
const isNullAddress = (a) => (0, exports.normalizeAddress)(a) === (0, exports.normalizeAddress)(exports.NULL_ADDRESS);
exports.isNullAddress = isNullAddress;
const normalizeAddressWith0x = (a) => (0, exports.ensureLeading0x)(a).toLowerCase();
exports.normalizeAddressWith0x = normalizeAddressWith0x;
const trimLeading0x = (input) => (input.startsWith('0x') ? input.slice(2) : input);
exports.trimLeading0x = trimLeading0x;
const ensureLeading0x = (input) => input.startsWith('0x') ? input : `0x${input}`;
exports.ensureLeading0x = ensureLeading0x;
// Turns '0xce10ce10ce10ce10ce10ce10ce10ce10ce10ce10'
// into ['ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10']
const getAddressChunks = (input) => (0, exports.trimLeading0x)(input).match(/.{1,4}/g) || [];
exports.getAddressChunks = getAddressChunks;
const isHexString = (input) => HEX_REGEX.test(input);
exports.isHexString = isHexString;
const hexToBuffer = (input) => Buffer.from((0, exports.trimLeading0x)(input), 'hex');
exports.hexToBuffer = hexToBuffer;
const bufferToHex = (buf) => (0, exports.ensureLeading0x)(buf.toString('hex'));
exports.bufferToHex = bufferToHex;
exports.NULL_ADDRESS = '0x0000000000000000000000000000000000000000';
const findAddressIndex = (address, addresses) => addresses.findIndex((x) => (0, exports.eqAddress)(x, address));
exports.findAddressIndex = findAddressIndex;
// Returns an array of indices mapping the entries of oldAddress[] to newAddress[]
const mapAddressListOnto = (oldAddress, newAddress) => {
    const oldAddressIndex = oldAddress.map((x, index) => ({ address: (0, exports.normalizeAddress)(x), index }));
    const newAddressIndex = newAddress.map((x, index) => ({ address: (0, exports.normalizeAddress)(x), index }));
    oldAddressIndex.sort((a, b) => a.address.localeCompare(b.address));
    newAddressIndex.sort((a, b) => a.address.localeCompare(b.address));
    const res = [...Array(oldAddress.length).fill(-1)];
    for (let i = 0, j = 0; i < oldAddress.length && j < newAddress.length;) {
        const cmp = oldAddressIndex[i].address.localeCompare(newAddressIndex[j].address);
        if (cmp < 0) {
            i++;
        }
        else if (cmp > 0) {
            j++;
        }
        else {
            // Address is present in both lists
            res[oldAddressIndex[i].index] = newAddressIndex[j].index;
            i++;
            j++;
        }
    }
    return res;
};
exports.mapAddressListOnto = mapAddressListOnto;
// Returns data[] reordered by mapAddressListOnto(), and initiaValue for any entry of
// oldAddress[] not present in newAddress[].
function mapAddressListDataOnto(data, oldAddress, newAddress, initialValue) {
    const res = [...Array(oldAddress.length).fill(initialValue)];
    if (data.length === 0) {
        return res;
    }
    const addressIndexMap = (0, exports.mapAddressListOnto)(oldAddress, newAddress);
    for (let i = 0; i < addressIndexMap.length; i++) {
        if (addressIndexMap[i] >= 0) {
            res[addressIndexMap[i]] = data[i];
        }
    }
    return res;
}
exports.mapAddressListDataOnto = mapAddressListDataOnto;
//# sourceMappingURL=address.js.map