"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;
const TAG = 'utils/src/async';
/** Sleep for a number of milliseconds */
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
// Retries an async function when it raises an exeption
// if all the tries fail it raises the last thrown exeption
const retryAsync = (inFunction, tries, params, delay = 100, logger = null) => __awaiter(void 0, void 0, void 0, function* () {
    let saveError;
    for (let i = 0; i < tries; i++) {
        try {
            // it awaits otherwise it'd always do all the retries
            return yield inFunction(...params);
        }
        catch (error) {
            yield sleep(delay);
            saveError = error;
            if (logger) {
                logger(`${TAG}/@retryAsync, Failed to execute function on try #${i}:`, error);
            }
        }
    }
    throw saveError;
});
exports.retryAsync = retryAsync;
// Retries an async function when it raises an exeption
// if all the tries fail it raises the last thrown exeption
const retryAsyncWithBackOff = (inFunction, tries, params, delay = 100, factor = 1.5, logger = null) => __awaiter(void 0, void 0, void 0, function* () {
    let saveError;
    for (let i = 0; i < tries; i++) {
        try {
            // it awaits otherwise it'd always do all the retries
            return yield inFunction(...params);
        }
        catch (error) {
            yield sleep(Math.pow(factor, i) * delay);
            saveError = error;
            if (logger) {
                logger(`${TAG}/@retryAsync, Failed to execute function on try #${i}`, error);
            }
        }
    }
    throw saveError;
});
exports.retryAsyncWithBackOff = retryAsyncWithBackOff;
// Retries an async function when it raises an exeption
// if all the tries fail it raises the last thrown exeption
// throws automatically on specified errors
const selectiveRetryAsyncWithBackOff = (inFunction, tries, dontRetry, params, delay = 100, factor = 1.5, logger = null) => __awaiter(void 0, void 0, void 0, function* () {
    let saveError;
    for (let i = 0; i < tries; i++) {
        try {
            // it awaits otherwise it'd always do all the retries
            return yield inFunction(...params);
        }
        catch (error) {
            if (dontRetry.some((msg) => error.message.includes(msg))) {
                throw error;
            }
            saveError = error;
            if (logger) {
                logger(`${TAG}/@retryAsync, Failed to execute function on try #${i}`, error);
            }
        }
        if (i < tries - 1) {
            yield sleep(Math.pow(factor, i) * delay);
        }
    }
    throw saveError;
});
exports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff;
// Retries an async function when it raises an exeption
// Terminates any ongoing request when the timeout is reached
// if all the tries fail it raises the last thrown exeption
const retryAsyncWithBackOffAndTimeout = (inFunction, tries, params, delayMs = 100, factor = 1.5, timeoutMs = 2000, logger = null) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(`Timed out after ${timeoutMs}ms`), `${TAG}/@retryAsyncWithBackOffAndTimeout, Timed out after ${timeoutMs}ms`, logger);
});
exports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;
/**
 * Map an async function over a list xs with a given concurrency level
 *
 * @param concurrency number of `mapFn` concurrent executions
 * @param xs list of value
 * @param mapFn mapping function
 */
function concurrentMap(concurrency, xs, mapFn) {
    return __awaiter(this, void 0, void 0, function* () {
        let res = [];
        for (let i = 0; i < xs.length; i += concurrency) {
            const remaining = xs.length - i;
            const sliceSize = Math.min(remaining, concurrency);
            const slice = xs.slice(i, i + sliceSize);
            res = res.concat(yield Promise.all(slice.map((elem, index) => mapFn(elem, i + index))));
        }
        return res;
    });
}
exports.concurrentMap = concurrentMap;
/**
 * Map an async function over the values in Object x with a given concurrency level
 *
 * @param concurrency number of `mapFn` concurrent executions
 * @param x associative array of values
 * @param mapFn mapping function
 */
function concurrentValuesMap(concurrency, x, mapFn) {
    return __awaiter(this, void 0, void 0, function* () {
        const xk = Object.keys(x);
        const xv = [];
        xk.forEach((k) => xv.push(x[k]));
        const res = yield concurrentMap(concurrency, xv, (val, idx) => mapFn(val, xk[idx]));
        return res.reduce((output, value, index) => {
            output[xk[index]] = value;
            return output;
        }, {});
    });
}
exports.concurrentValuesMap = concurrentValuesMap;
/**
 * Wraps an async function in a timeout before calling it.
 *
 * @param inFunction The async function to call
 * @param params The parameters of the async function
 * @param timeoutMs The timeout in milliseconds
 * @param timeoutError The value to which the returned Promise should reject to
 */
const timeout = (inFunction, params, timeoutMs, timeoutError, timeoutLogMsg = null, logger = null) => {
    let timer;
    return Promise.race([
        inFunction(...params),
        new Promise((_resolve, reject) => {
            timer = setTimeout(() => {
                if (logger) {
                    logger(timeoutLogMsg || `${TAG}/@timeout Timed out after ${timeoutMs}ms`);
                }
                reject(timeoutError);
            }, timeoutMs);
        }),
    ]).finally(() => {
        clearTimeout(timer);
    });
};
exports.timeout = timeout;
//# sourceMappingURL=async.js.map