"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipeToFuture = exports.toFuture = exports.Future = void 0;
// A Future is like an externally fulfillable (resolvable) promise
/** @internal */
class Future {
    constructor() {
        this._finished = false;
        this._error = null;
        this.promise = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
    }
    get finished() {
        return this._finished;
    }
    get error() {
        return this._error;
    }
    resolve(value) {
        this._finished = true;
        this._error = null;
        this._resolve(value);
    }
    reject(error) {
        this._finished = true;
        this._error = error;
        this._reject(error);
    }
    wait() {
        return this.promise;
    }
    asPromise() {
        return this.promise;
    }
}
exports.Future = Future;
/** @internal */
function toFuture(p) {
    const future = new Future();
    return pipeToFuture(p, future);
}
exports.toFuture = toFuture;
/** @internal */
function pipeToFuture(p, future) {
    p.then(future.resolve.bind(future)).catch(future.reject.bind(future));
    return future;
}
exports.pipeToFuture = pipeToFuture;
//# sourceMappingURL=future.js.map